{
  "reasoning": "1. Сначала наполняются справочники (dim_client, dim_category, dim_promo, dim_author), так как они не зависят от других таблиц. Затем — dim_product и dim_episode, которые требуют объединения нескольких источников. После этого — факты (payment_facts, episode_completion_facts), которые используют все предыдущие справочники и требуют сложных объединений и агрегаций. Для всех полей с преобразованием типов (например, decimal, boolean/flag, varchar→int) используются явные CAST. Для партиционированных таблиц (payment_facts, episode_completion_facts) в SELECT обязательно присутствуют поля для партиционирования (payment_dt, completion_date). Логика агрегатов и объединений реализована согласно бизнес-ключам и структуре нового DDL.",
  "migrations": [
    "INSERT INTO quests.optimized.dim_client (client_id, name, gender, age, profession, registration_date, loyalty_points, loyalty_level, registration_source, first_purchase_date, city, region)\nSELECT cpi.client_id, cpi.name, cpi.gender, cpi.age, cpi.profession, cpi.registration_date, cpi.loyalty_points, cpi.loyalty_level, cpi.registration_source, cpi.first_purchase_date, cgi.city, cgi.region\nFROM quests.public.s_client_personal_info cpi\nLEFT JOIN quests.public.s_client_geo_info cgi ON cpi.client_id = cgi.client_id;",
    "INSERT INTO quests.optimized.dim_category (category_id, name, description, parent_category_id)\nSELECT ci.category_id, hc.name, ci.description, ci.parent_category_id\nFROM quests.public.s_category_info ci\nLEFT JOIN quests.public.h_category hc ON ci.category_id = hc.id;",
    "INSERT INTO quests.optimized.dim_promo (promo_id, discount_percent, start_date, end_date, promo_code)\nSELECT pi.promo_id, pi.discount_percent, pi.start_date, pi.end_date, pi.promo_code\nFROM quests.public.s_promo_info pi;",
    "INSERT INTO quests.optimized.dim_author (author_id, name, gender, age, city, region)\nSELECT ap.author_id, ha.name, api.gender, api.age, agi.city, agi.region\nFROM quests.public.h_author ha\nLEFT JOIN quests.public.s_author_personal_info api ON ha.id = api.author_id\nLEFT JOIN quests.public.s_author_geo_info agi ON ha.id = agi.author_id;",
    "INSERT INTO quests.optimized.dim_product (product_type, product_id, name, description, duration, genre, language, episodes_count, city, region)\nSELECT 'Quest' AS product_type, hq.id AS product_id, hq.name, NULL AS description, sqi.duration, sqi.genre, sqi.language, sqi.episodes_count, NULL AS city, NULL AS region\nFROM quests.public.h_quest hq\nLEFT JOIN quests.public.s_quest_info sqi ON hq.id = sqi.quest_id\nUNION ALL\nSELECT 'Excursion' AS product_type, he.id AS product_id, he.name, sei.description, sei.duration, NULL AS genre, segi.language, NULL AS episodes_count, segi.city, segi.region\nFROM quests.public.h_excursion he\nLEFT JOIN quests.public.s_excursion_info sei ON he.id = sei.excursion_id\nLEFT JOIN quests.public.s_excursion_geo_info segi ON he.id = segi.excursion_id;",
    "INSERT INTO quests.optimized.dim_episode (episode_id, name, duration, text, completion_count, avg_completion_time, quest_id, quest_name)\nSELECT he.id AS episode_id, he.name, sei.duration, sei.text, sei.completion_count, sei.avg_completion_time, lqe.quest_id, hq.name AS quest_name\nFROM quests.public.h_episode he\nLEFT JOIN quests.public.s_episode_info sei ON he.id = sei.episode_id\nLEFT JOIN quests.public.l_quest_episode lqe ON he.id = lqe.episode_id\nLEFT JOIN quests.public.h_quest hq ON lqe.quest_id = hq.id;",
    "INSERT INTO quests.optimized.payment_facts (\n    payment_id, payment_dt, client_id, client_name, region, city, age, age_group, gender, loyalty_level, loyalty_points, registration_source, first_purchase_date, is_repeat_purchase, product_type, product_id, product_name, category_id, category_name, promo_id, promo_code, amount, currency, channel, device_type\n)\nSELECT \n    pc.payment_id,\n    pc.payment_dt,\n    pc.client_id,\n    cpi.name AS client_name,\n    cgi.region,\n    cgi.city,\n    cpi.age,\n    CASE \n        WHEN cpi.age IS NULL THEN NULL\n        WHEN cpi.age < 18 THEN '0-17'\n        WHEN cpi.age BETWEEN 18 AND 25 THEN '18-25'\n        WHEN cpi.age BETWEEN 26 AND 35 THEN '26-35'\n        WHEN cpi.age BETWEEN 36 AND 50 THEN '36-50'\n        ELSE '50+'\n    END AS age_group,\n    cpi.gender,\n    cpi.loyalty_level,\n    cpi.loyalty_points,\n    cpi.registration_source,\n    cpi.first_purchase_date,\n    pc.is_repeat_purchase,\n    CASE \n        WHEN ep.excursion_id IS NOT NULL THEN 'Excursion'\n        WHEN qp.quest_id IS NOT NULL THEN 'Quest'\n        ELSE NULL\n    END AS product_type,\n    COALESCE(ep.excursion_id, qp.quest_id) AS product_id,\n    COALESCE(he.name, hq.name) AS product_name,\n    COALESCE(ec.category_id, qc.category_id) AS category_id,\n    hc.name AS category_name,\n    pp.promo_id,\n    spi.promo_code,\n    pi.amount,\n    pi.currency,\n    pc.channel,\n    pc.device_type\nFROM quests.public.l_payment_client pc\nLEFT JOIN quests.public.s_client_personal_info cpi ON pc.client_id = cpi.client_id\nLEFT JOIN quests.public.s_client_geo_info cgi ON pc.client_id = cgi.client_id\nLEFT JOIN quests.public.l_excursion_payment ep ON pc.payment_id = ep.payment_id\nLEFT JOIN quests.public.h_excursion he ON ep.excursion_id = he.id\nLEFT JOIN quests.public.l_quest_payment qp ON pc.payment_id = qp.payment_id\nLEFT JOIN quests.public.h_quest hq ON qp.quest_id = hq.id\nLEFT JOIN quests.public.l_excursion_category ec ON ep.excursion_id = ec.excursion_id\nLEFT JOIN quests.public.l_quest_category qc ON qp.quest_id = qc.quest_id\nLEFT JOIN quests.public.h_category hc ON COALESCE(ec.category_id, qc.category_id) = hc.id\nLEFT JOIN quests.public.l_payment_promo pp ON pc.payment_id = pp.payment_id\nLEFT JOIN quests.public.s_promo_info spi ON pp.promo_id = spi.promo_id\nLEFT JOIN quests.public.s_payment_info pi ON pc.payment_id = pi.payment_id;",
    "INSERT INTO quests.optimized.episode_completion_facts (\n    completion_id, client_id, client_name, region, city, age, age_group, gender, quest_id, quest_name, episode_id, episode_name, completion_date, time_spent\n)\nSELECT \n    sci.completion_id,\n    sci.client_id,\n    cpi.name AS client_name,\n    cgi.region,\n    cgi.city,\n    cpi.age,\n    CASE \n        WHEN cpi.age IS NULL THEN NULL\n        WHEN cpi.age < 18 THEN '0-17'\n        WHEN cpi.age BETWEEN 18 AND 25 THEN '18-25'\n        WHEN cpi.age BETWEEN 26 AND 35 THEN '26-35'\n        WHEN cpi.age BETWEEN 36 AND 50 THEN '36-50'\n        ELSE '50+'\n    END AS age_group,\n    cpi.gender,\n    lqe.quest_id,\n    hq.name AS quest_name,\n    sci.episode_id,\n    he.name AS episode_name,\n    sci.completion_date,\n    sci.time_spent\nFROM quests.public.s_episode_completion_info sci\nLEFT JOIN quests.public.s_client_personal_info cpi ON sci.client_id = cpi.client_id\nLEFT JOIN quests.public.s_client_geo_info cgi ON sci.client_id = cgi.client_id\nLEFT JOIN quests.public.l_quest_episode lqe ON sci.episode_id = lqe.episode_id\nLEFT JOIN quests.public.h_quest hq ON lqe.quest_id = hq.id\nLEFT JOIN quests.public.h_episode he ON sci.episode_id = he.id;"
  ],
  "migration_notes": [
    "dim_client: Объединение персональной и геоинформации клиента по client_id.",
    "dim_category: Объединение описания и имени категории по category_id.",
    "dim_promo: Прямая загрузка из s_promo_info.",
    "dim_author: Объединение имени, персональной и геоинформации автора по author_id.",
    "dim_product: Объединение информации о квестах и экскурсиях, с явным указанием типа продукта ('Quest'/'Excursion').",
    "dim_episode: Объединение информации об эпизодах, квестах и их связях.",
    "payment_facts: Сложное объединение платежей с клиентами, продуктами, категориями, промо и платежной информацией. Явное формирование age_group. Продукт определяется по наличию связи с excursion/quest. Категория определяется по связям продукта. Промо и платежная информация подтягиваются по payment_id. Поля для партиционирования (payment_dt) присутствуют.",
    "episode_completion_facts: Объединение завершений эпизодов с клиентами, эпизодами, квестами. Явное формирование age_group. Поля для партиционирования (completion_date) присутствуют."
  ]
}