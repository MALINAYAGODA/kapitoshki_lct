{
  "reasoning": "Порядок выполнения миграций учитывает зависимости: сначала миграция основной таблицы, затем материализованные таблицы. Для партиционированной таблицы указаны поля для партиционирования. Типы данных сохранены, явные CAST используются для boolean столбцов.",
  "migrations": [
    "INSERT INTO flights.optimized.flights_partitioned (flightdate, airline, origin, dest, cancelled, diverted, crsdeptime, deptime, depdelayminutes, depdelay, arrtime, arrdelayminutes, airtime, crselapsedtime, actualelapsedtime, distance, year, month, dayofmonth, dayofweek, marketing_airline_network, operated_or_branded_code_share_partners, dot_id_marketing_airline, iata_code_marketing_airline, flight_number_marketing_airline, operating_airline, dot_id_operating_airline, iata_code_operating_airline, tail_number, flight_number_operating_airline, originairportid, originairportseqid, origincitymarketid, origincityname, originstate, originstatefips, originstatename, originwac, destairportid, destairportseqid, destcitymarketid, destcityname, deststate, deststatefips, deststatename, destwac, depdel15, departuredelaygroups, deptimeblk, taxiout, wheelsoff, wheelson, taxiin, crsarrtime, arrdelay, arrdel15, arrivaldelaygroups, arrtimeblk, distancegroup, divairportlandings) SELECT flightdate, airline, origin, dest, cancelled::boolean, diverted::boolean, crsdeptime, deptime, depdelayminutes, depdelay, arrtime, arrdelayminutes, airtime, crselapsedtime, actualelapsedtime, distance, year, month, dayofmonth, dayofweek, marketing_airline_network, operated_or_branded_code_share_partners, dot_id_marketing_airline, iata_code_marketing_airline, flight_number_marketing_airline, operating_airline, dot_id_operating_airline, iata_code_operating_airline, tail_number, flight_number_operating_airline, originairportid, originairportseqid, origincitymarketid, origincityname, originstate, originstatefips, originstatename, originwac, destairportid, destairportseqid, destcitymarketid, destcityname, deststate, deststatefips, deststatename, destwac, depdel15, departuredelaygroups, deptimeblk, taxiout, wheelsoff, wheelson, taxiin, crsarrtime, arrdelay, arrdel15, arrivaldelaygroups, arrtimeblk, distancegroup, divairportlandings FROM flights.public.flights PARTITIONED BY (year, month)",
    "INSERT INTO flights.optimized.top_airports_by_month (month, origin, totalflights, airportrank) SELECT month, origin, COUNT(*) AS totalflights, RANK() OVER (PARTITION BY month ORDER BY COUNT(*) DESC) AS airportrank FROM flights.optimized.flights_partitioned GROUP BY month, origin",
    "INSERT INTO flights.optimized.major_airports (airport, airportcity, airportstate, airportrole, totalflights, avgdiscrepancy, avgdepdelay, avgdepdelayminutes, percentdelayeddepartures, percentdiverted, percentcancelled) SELECT origin, origincityname, originstate, 'Major', COUNT(*) AS totalflights, AVG(abs(crsdeptime - deptime)) AS avgdiscrepancy, AVG(depdelay) AS avgdepdelay, AVG(depdelayminutes) AS avgdepdelayminutes, SUM(CASE WHEN depdelay > 0 THEN 1 ELSE 0 END) * 100.0 / COUNT(*) AS percentdelayeddepartures, SUM(CASE WHEN diverted = true THEN 1 ELSE 0 END) * 100.0 / COUNT(*) AS percentdiverted, SUM(CASE WHEN cancelled = true THEN 1 ELSE 0 END) * 100.0 / COUNT(*) AS percentcancelled FROM flights.optimized.flights_partitioned GROUP BY origin, origincityname, originstate",
    "INSERT INTO flights.optimized.operating_airlines (operating_airline, dayofweek, totalflights, avgdeparturedelayminutes, ontimedepartures, ontimedeparturepercent) SELECT operating_airline, dayofweek, COUNT(*) AS totalflights, AVG(depdelayminutes) AS avgdeparturedelayminutes, SUM(CASE WHEN depdelay <= 0 THEN 1 ELSE 0 END) AS ontimedepartures, SUM(CASE WHEN depdelay <= 0 THEN 1 ELSE 0 END) * 100.0 / COUNT(*) AS ontimedeparturepercent FROM flights.optimized.flights_partitioned GROUP BY operating_airline, dayofweek",
    "INSERT INTO flights.optimized.distance_groups (distancegroup, totalflights, avgcorrelation, avgdeparturedelayminutes, avgarrivaldelayminutes, percentdelayeddepartures, percentdelayedarrivals) SELECT distancegroup, COUNT(*) AS totalflights, AVG(correlation) AS avgcorrelation, AVG(depdelayminutes) AS avgdeparturedelayminutes, AVG(arrdelayminutes) AS avgarrivaldelayminutes, SUM(CASE WHEN depdelay > 0 THEN 1 ELSE 0 END) * 100.0 / COUNT(*) AS percentdelayeddepartures, SUM(CASE WHEN arrdelay > 0 THEN 1 ELSE 0 END) * 100.0 / COUNT(*) AS percentdelayedarrivals FROM flights.optimized.flights_partitioned GROUP BY distancegroup",
    "INSERT INTO flights.optimized.aircraft_types (operating_airline, aircrafttypecategory, totalflights, delayedflights, delaypercentage) SELECT operating_airline, aircrafttypecategory, COUNT(*) AS totalflights, SUM(CASE WHEN depdelay > 0 THEN 1 ELSE 0 END) AS delayedflights, SUM(CASE WHEN depdelay > 0 THEN 1 ELSE 0 END) * 100.0 / COUNT(*) AS delaypercentage FROM flights.optimized.flights_partitioned GROUP BY operating_airline, aircrafttypecategory",
    "INSERT INTO flights.optimized.recovery_rates (operating_airline, totalflights, delayeddepartures, recoveredflights, unrecoveredflights, recoveryratepercent, avgdeparturedelay, avgdeparturedelayforrecovered, avgdelayincrease) SELECT operating_airline, COUNT(*) AS totalflights, SUM(CASE WHEN depdelay > 0 THEN 1 ELSE 0 END) AS delayeddepartures, SUM(CASE WHEN depdelay <= 0 THEN 1 ELSE 0 END) AS recoveredflights, SUM(CASE WHEN depdelay > 0 AND depdelay <= 30 THEN 1 ELSE 0 END) AS unrecoveredflights, SUM(CASE WHEN depdelay <= 0 THEN 1 ELSE 0 END) * 100.0 / COUNT(*) AS recoveryratepercent, AVG(depdelay) AS avgdeparturedelay, AVG(CASE WHEN depdelay <= 0 THEN depdelay ELSE NULL END) AS avgdeparturedelayforrecovered, AVG(CASE WHEN depdelay > 0 THEN depdelay - (CASE WHEN depdelay <= 0 THEN 0 ELSE NULL END) ELSE NULL END) AS avgdelayincrease FROM flights.optimized.flights_partitioned GROUP BY operating_airline",
    "INSERT INTO flights.optimized.flight_dates (flightdate, distancegroup, totalflights, delayedflights, estimatedpassengersshorthaul, estimatedpassengersmediumhaul, estimatedpassengerslonghaul, totalestimatedaffectedpassengers, delayratepercentage) SELECT flightdate, distancegroup, COUNT(*) AS totalflights, SUM(CASE WHEN depdelay > 0 THEN 1 ELSE 0 END) AS delayedflights, SUM(CASE WHEN distancegroup <= 500 THEN 1 ELSE 0 END) * 100.0 / COUNT(*) AS estimatedpassengersshorthaul, SUM(CASE WHEN distancegroup BETWEEN 501 AND 1500 THEN 1 ELSE 0 END) * 100.0 / COUNT(*) AS estimatedpassengersmediumhaul, SUM(CASE WHEN distancegroup > 1500 THEN 1 ELSE 0 END) * 100.0 / COUNT(*) AS estimatedpassengerslonghaul, SUM(CASE WHEN depdelay > 0 THEN 1 ELSE 0 END) * 100.0 / COUNT(*) AS totalestimatedaffectedpassengers, SUM(CASE WHEN depdelay > 0 THEN 1 ELSE 0 END) * 100.0 / COUNT(*) AS delayratepercentage FROM flights.optimized.flights_partitioned GROUP BY flightdate, distancegroup",
    "INSERT INTO flights.optimized.departure_time_blocks (deptimeblk, totalflights, delayeddepartures, avgdeparturedelay, avgarrivaldelay, avgdelayrecoveryminutes, percentflightsrecoveredtime, avgminutesrecovered, avgdelaygrowth) SELECT deptimeblk, COUNT(*) AS totalflights, SUM(CASE WHEN depdelay > 0 THEN 1 ELSE 0 END) AS delayeddepartures, AVG(depdelay) AS avgdeparturedelay, AVG(arrdelay) AS avgarrivaldelay, AVG(CASE WHEN depdelay <= 0 THEN depdelay - (CASE WHEN depdelay > 0 THEN depdelay ELSE NULL END) ELSE NULL END) AS avgdelayrecoveryminutes, SUM(CASE WHEN depdelay <= 0 THEN 1 ELSE 0 END) * 100.0 / COUNT(*) AS percentflightsrecoveredtime, AVG(CASE WHEN depdelay <= 0 THEN depdelay - (CASE WHEN depdelay > 0 THEN depdelay ELSE NULL END) ELSE NULL END) AS avgminutesrecovered, AVG(CASE WHEN depdelay > 0 THEN depdelay - (CASE WHEN depdelay <= 0 THEN 0 ELSE NULL END) ELSE NULL END) AS avgdelaygrowth FROM flights.optimized.flights_partitioned GROUP BY deptimeblk",
    "INSERT INTO flights.optimized.holiday_cancellation_rates (operating_airline, periodtype, holidaycancellationrate, regularcancellationrate, ratedifference, percentincrease) SELECT operating_airline, periodtype, SUM(CASE WHEN cancelled = true THEN 1 ELSE 0 END) * 100.0 / COUNT(*) AS holidaycancellationrate, SUM(CASE WHEN cancelled = true AND periodtype = 'Regular' THEN 1 ELSE 0 END) * 100.0 / COUNT(*) AS regularcancellationrate, (SUM(CASE WHEN cancelled = true THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) - (SUM(CASE WHEN cancelled = true AND periodtype = 'Regular' THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS ratedifference, ((SUM(CASE WHEN cancelled = true THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) - (SUM(CASE WHEN cancelled = true AND periodtype = 'Regular' THEN 1 ELSE 0 END) * 100.0 / COUNT(*))) * 100.0 / (SUM(CASE WHEN cancelled = true AND periodtype = 'Regular' THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS percentincrease FROM flights.optimized.flights_partitioned GROUP BY operating_airline, periodtype",
    "INSERT INTO flights.optimized.monthly_data (year, month, airtrafficvolume, avgdeparturedelay) SELECT year, month, COUNT(*) AS airtrafficvolume, AVG(depdelay) AS avgdeparturedelay FROM flights.optimized.flights_partitioned GROUP BY year, month",
    "INSERT INTO flights.optimized.route_types (origin, dest, origincityname, destcityname, routetype, weekdayflights, weekendflights, morningflights, eveningflights, middayflights, midnightflights, businesshubflights, leisuredestinationflights) SELECT origin, dest, origincityname, destcityname, routetype, SUM(CASE WHEN dayofweek IN (1, 2, 3, 4, 5) THEN 1 ELSE 0 END) AS weekdayflights, SUM(CASE WHEN dayofweek IN (6, 7) THEN 1 ELSE 0 END) AS weekendflights, SUM(CASE WHEN deptimeblk LIKE '06%' THEN 1 ELSE 0 END) AS morningflights, SUM(CASE WHEN deptimeblk LIKE '18%' THEN 1 ELSE 0 END) AS eveningflights, SUM(CASE WHEN deptimeblk LIKE '12%' THEN 1 ELSE 0 END) AS middayflights, SUM(CASE WHEN deptimeblk LIKE '23%' THEN 1 ELSE 0 END) AS midnightflights, SUM(CASE WHEN origincityname IN ('New York', 'Chicago', 'Los Angeles') THEN 1 ELSE 0 END) AS businesshubflights, SUM(CASE WHEN destcityname IN ('Miami', 'Las Vegas', 'Orlando') THEN 1 ELSE 0 END) AS leisuredestinationflights FROM flights.optimized.flights_partitioned GROUP BY origin, dest, origincityname, destcityname, routetype",
    "INSERT INTO flights.optimized.delay_patterns (routetype, daytype, totalflights, delayedflights, delayratepercent, avgdelayminutes, avgtaxiout, delayratevsoverallavg) SELECT routetype, daytype, COUNT(*) AS totalflights, SUM(CASE WHEN depdelay > 0 THEN 1 ELSE 0 END) AS delayedflights, SUM(CASE WHEN depdelay > 0 THEN 1 ELSE 0 END) * 100.0 / COUNT(*) AS delayratepercent, AVG(depdelay) AS avgdelayminutes, AVG(taxiout) AS avgtaxiout, (SUM(CASE WHEN depdelay > 0 THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) - (SELECT AVG(depdelay) * 100.0 / COUNT(*) FROM flights.optimized.flights_partitioned) AS delayratevsoverallavg FROM flights.optimized.flights_partitioned GROUP BY routetype, daytype"
  ],
  "migration_notes": [
    "Миграция основной таблицы с учетом партиционирования по годам и месяцам.",
    "Миграция материализованной таблицы top_airports_by_month с использованием оконной функции RANK().",
    "Миграция материализованной таблицы major_airports с использованием агрегатных функций и CASE-выражений.",
    "Миграция материализованной таблицы operating_airlines с использованием агрегатных функций и CASE-выражений.",
    "Миграция материализованной таблицы distance_groups с использованием агрегатных функций и CASE-выражений.",
    "Миграция материализованной таблицы aircraft_types с использованием агрегатных функций и CASE-выражений.",
    "Миграция материализованной таблицы recovery_rates с использованием агрегатных функций и CASE-выражений.",
    "Миграция материализованной таблицы flight_dates с использованием агрегатных функций и CASE-выражений.",
    "Миграция материализованной таблицы departure_time_blocks с использованием агрегатных функций и CASE-выражений.",
    "Миграция материализованной таблицы holiday_cancellation_rates с использованием агрегатных функций и CASE-выражений.",
    "Миграция материализованной таблицы monthly_data с использованием агрегатных функций и CASE-выражений.",
    "Миграция материализованной таблицы route_types с использованием агрегатных функций и CASE-выражений.",
    "Миграция материализованной таблицы delay_patterns с использованием агрегатных функций и CASE-выражений."
  ]
}