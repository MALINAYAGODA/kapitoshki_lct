{
  "queries": [
    {
      "queryid": "10ba3c04-0f91-4ef3-a717-c1e0d33b31bc",
      "query": "WITH MonthlyFlightCounts AS ( SELECT Origin, month(f.flightdate) AS Month, COUNT(*) AS TotalFlights FROM flights.optimized.flights_partitioned f GROUP BY Origin, month(f.flightdate) ORDER BY Month DESC, TotalFlights DESC ), TopAirportsByMonth AS ( SELECT Month, Origin, TotalFlights, RANK() OVER (PARTITION BY Month ORDER BY TotalFlights DESC) AS AirportRank FROM MonthlyFlightCounts ), FilteredFlights AS ( SELECT f.*, CASE WHEN f.deptimeblk IN ('0600-0659', '0700-0759', '0800-0859', '1600-1659', '1700-1759', '1800-1859') THEN 'Peak' ELSE 'Off-Peak' END AS TimeOfDay FROM flights.optimized.flights_partitioned f JOIN TopAirportsByMonth t ON f.origin = t.Origin AND month(f.flightdate) = t.Month WHERE f.cancelled = false AND f.diverted = false AND t.AirportRank <= 10 ) SELECT ff.Month, ff.Origin, ff.TimeOfDay, COUNT(*) AS TotalFlights, ROUND(AVG(ff.taxiout), 2) AS AvgTaxiOut, ROUND(AVG(ff.depdelayminutes), 2) AS AvgDEPDelay, ROUND(AVG(ff.arrdelayminutes), 2) AS AvgARRDelay, ROUND(CORR(ff.taxiout, ff.depdelayminutes), 2) AS TaxiOut_DepDelay_Correlation, ROUND(CORR(ff.taxiout, ff.arrdelayminutes), 2) AS TaxiOut_ArrDelay_Correlation, SUM(CASE WHEN ff.depdel15 = 1 THEN 1 ELSE 0 END) AS DelayedFlights, ROUND( (SUM(CASE WHEN ff.depdel15 = 1 THEN 1 ELSE 0 END) * 100.0 / COUNT(*)), 2 ) AS PercentDelayed FROM FilteredFlights ff GROUP BY ff.Month, ff.Origin, ff.TimeOfDay ORDER BY ff.Month DESC, ff.Origin, ff.TimeOfDay;"
    },
    {
      "queryid": "8abd47c0-31cb-4ba0-891f-9bac53bbc909",
      "query": "WITH AirportDiscrepancy AS ( SELECT origin AS Airport, origincityname AS AirportCity, originstate AS AirportState, 'Origin' AS AirportRole, COUNT(*) AS TotalFlights, AVG(actualelapsedtime - crselapsedtime) AS AvgDiscrepancy, AVG(depdelay) AS AvgDepDelay, AVG(depdelayminutes) AS AvgDepDelayMinutes, AVG(taxiout) AS AvgTaxiOut, AVG(CASE WHEN depdel15 = 1 THEN 1 ELSE 0 END) AS PercentDelayedDepartures, AVG(CASE WHEN diverted THEN 1 ELSE 0 END) AS PercentDiverted, AVG(CASE WHEN cancelled THEN 1 ELSE 0 END) AS PercentCancelled FROM flights.optimized.flights_partitioned WHERE crselapsedtime IS NOT NULL AND actualelapsedtime IS NOT NULL AND crselapsedtime > 0 AND cancelled = false GROUP BY origin, origincityname, originstate UNION ALL SELECT dest AS Airport, destcityname AS AirportCity, deststate AS AirportState, 'Destination' AS AirportRole, COUNT(*) AS TotalFlights, AVG(actualelapsedtime - crselapsedtime) AS AvgDiscrepancy, AVG(arrdelay) AS AvgDepDelay, AVG(arrdelayminutes) AS AvgDepDelayMinutes, AVG(taxiin) AS AvgTaxiOut, AVG(CASE WHEN arrdel15 = 1 THEN 1 ELSE 0 END) AS PercentDelayedDepartures, AVG(CASE WHEN diverted THEN 1 ELSE 0 END) AS PercentDiverted, AVG(CASE WHEN cancelled THEN 1 ELSE 0 END) AS PercentCancelled FROM flights.optimized.flights_partitioned WHERE crselapsedtime IS NOT NULL AND actualelapsedtime IS NOT NULL AND crselapsedtime > 0 AND cancelled = false GROUP BY dest, destcityname, deststate ), RankedAirports AS ( SELECT *, RANK() OVER (ORDER BY AvgDiscrepancy DESC) AS DiscrepancyRank FROM AirportDiscrepancy WHERE TotalFlights > 1000 ) SELECT Airport, AirportCity, AirportState, AirportRole, TotalFlights, ROUND(AvgDiscrepancy, 2) AS AvgDiscrepancyMinutes, ROUND(AvgDepDelay, 2) AS AvgDelayMinutes, ROUND(AvgDepDelayMinutes, 2) AS AvgDelayMinutesNonNegative, ROUND(AvgTaxiOut, 2) AS AvgTaxiTimeMinutes, ROUND(PercentDelayedDepartures * 100, 2) AS PercentDelayedFlights, ROUND(PercentDiverted * 100, 2) AS PercentDivertedFlights, ROUND(PercentCancelled * 100, 2) AS PercentCancelledFlights, DiscrepancyRank FROM RankedAirports WHERE DiscrepancyRank <= 20 ORDER BY DiscrepancyRank"
    },
    {
      "queryid": "38a70da3-f3f2-48e9-896d-4f9303598967",
      "query": "WITH ontime_flights AS (SELECT operating_airline, dayofweek, COUNT(*) AS totalflights, AVG(depdelayminutes) AS avg_departure_delay_minutes, SUM(CASE WHEN depdel15 = 0 THEN 1 ELSE 0 END) AS ontimeflights FROM flights.optimized.flights_partitioned WHERE cancelled = false AND diverted = false AND depdelayminutes IS NOT NULL GROUP BY operating_airline, dayofweek) SELECT operating_airline AS Airline, dayofweek, totalflights, ROUND(avg_departure_delay_minutes, 2) AS AvgDepartureDelayMinutes, ontimeflights, ROUND((ontimeflights * 100.0 / totalflights), 2) AS OnTimePerformancePercent FROM ontime_flights ORDER BY OnTimePerformancePercent DESC, AvgDepartureDelayMinutes ASC;"
    },
    {
      "queryid": "eee49065-116e-456a-83d9-0e0ef8083086",
      "query": "WITH MajorAirports AS ( SELECT airport, airportcity, totalflights FROM flights.optimized.top_airports_by_month WHERE month = (SELECT MAX(month) FROM flights.optimized.top_airports_by_month) ), PeakHoursFlights AS ( SELECT f.origin AS airport, m.airportcity, f.deptimeblk, f.taxiout, f.depdelayminutes, f.depdel15 FROM flights.optimized.flights_partitioned f JOIN MajorAirports m ON f.origin = m.airport WHERE f.cancelled = false AND f.diverted = false AND f.taxiout IS NOT NULL AND f.depdelayminutes IS NOT NULL AND f.deptimeblk IN ('0600-0659', '0700-0759', '0800-0859', '1600-1659', '1700-1759', '1800-1859') ) SELECT airport, airportcity, deptimeblk, COUNT(*) AS totalflights, ROUND(AVG(taxiout), 2) AS avgtaxioutminutes, ROUND(AVG(depdelayminutes), 2) AS avgdeparturedelayminutes, ROUND(CORR(taxiout, depdelayminutes), 3) AS taxiout_depdelay_correlation, SUM(CASE WHEN depdel15 = 1 THEN 1 ELSE 0 END) AS delayedflights, ROUND((SUM(CASE WHEN depdel15 = 1 THEN 1 ELSE 0 END) * 100.0 / COUNT(*)), 2) AS percentdelayed15plus, ROUND(AVG(CASE WHEN taxiout <= 10 THEN depdelayminutes END), 2) AS avgdelay_taxiout_0_10, ROUND(AVG(CASE WHEN taxiout > 10 AND taxiout <= 20 THEN depdelayminutes END), 2) AS avgdelay_taxiout_11_20, ROUND(AVG(CASE WHEN taxiout > 20 THEN depdelayminutes END), 2) AS avgdelay_taxiout_20plus FROM PeakHoursFlights GROUP BY airport, airportcity, deptimeblk ORDER BY airport, deptimeblk"
    },
    {
      "queryid": "d7e84363-86f7-47a2-851f-41a793fea732",
      "query": "WITH filtered_flights AS (SELECT flightdate, origin, dest, depdelayminutes, depdel15 FROM flights.optimized.flights_partitioned WHERE cancelled = false AND diverted = false AND depdel15 IS NOT NULL AND depdelayminutes IS NOT NULL AND depdel15 IS NOT NULL AND flightdate >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '12 months') SELECT origin AS Airport, origincityname AS AirportCity, originstate AS AirportState, COUNT(*) AS TotalFlights, SUM(CASE WHEN depdel15 = 1 THEN 1 ELSE 0 END) AS DelayedFlights, ROUND((SUM(CASE WHEN depdel15 = 1 THEN 1 ELSE 0 END) * 100.0 / COUNT(*)), 2) AS PercentDelayedFlights, ROUND(AVG(depdelayminutes), 2) AS AvgDepartureDelayMinutes, ROUND(AVG(taxiout), 2) AS AvgTaxiOutMinutes FROM filtered_flights GROUP BY origin, origincityname, originstate HAVING COUNT(*) > 1000 ORDER BY PercentDelayedFlights DESC, AvgDepartureDelayMinutes DESC LIMIT 20;"
    },
    {
      "queryid": "20eca341-19e1-4d85-a75d-07d9253ff06d",
      "query": "WITH aggregated_flights AS ( SELECT distancegroup, COUNT(*) AS totalflights, CORR(depdelayminutes, arrdelayminutes) AS delaycorrelation, AVG(depdelayminutes) AS avgdeparturedelayminutes, AVG(arrdelayminutes) AS avgarrivaldelayminutes, SUM(CASE WHEN depdel15 = 1 THEN 1 ELSE 0 END) * 100.0 / COUNT(*) AS percentdelayeddepartures, SUM(CASE WHEN arrdel15 = 1 THEN 1 ELSE 0 END) * 100.0 / COUNT(*) AS percentdelayedarrivals FROM flights.optimized.flights_partitioned WHERE cancelled = false AND diverted = false AND depdelayminutes IS NOT NULL AND arrdelayminutes IS NOT NULL AND distancegroup IS NOT NULL GROUP BY distancegroup ) SELECT distancegroup, totalflights, delaycorrelation, avgdeparturedelayminutes, avgarrivaldelayminutes, percentdelayeddepartures, percentdelayedarrivals FROM aggregated_flights ORDER BY distancegroup"
    },
    {
      "queryid": "aaf7984c-796c-4df7-b29f-e63362d1823d",
      "query": "WITH flight_category AS (SELECT CASE WHEN distance < 500 THEN 'Short-Haul (<500 miles)' WHEN distance > 1500 THEN 'Long-Haul (>1500 miles)' END AS FlightCategory, departuredelaygroups, COUNT(*) AS FlightCount FROM flights.optimized.flights WHERE cancelled = false AND diverted = false AND distance IS NOT NULL AND departuredelaygroups IS NOT NULL AND (distance < 500 OR distance > 1500) GROUP BY 1, departuredelaygroups) SELECT fc.FlightCategory, fc.departuredelaygroups, fc.FlightCount, ROUND(fc.FlightCount * 100.0 / SUM(fc.FlightCount) OVER (PARTITION BY fc.FlightCategory), 2) AS PercentageOfCategory, ROUND(AVG(fc.depdelayminutes), 2) AS AvgDelayMinutes, ROUND(SUM(CASE WHEN depdel15 = 1 THEN 1 ELSE 0 END) * 100.0 / fc.FlightCount, 2) AS PercentDelayed15Plus FROM flight_category fc GROUP BY 1, 2 ORDER BY 1, 2"
    },
    {
      "queryid": "c1de9515-3da5-4440-a6d9-537e2cc4f5c8",
      "query": "WITH DistanceGroupAverages AS ( SELECT DistanceGroup, AVG(CASE WHEN ArrDel15 = 1 THEN 1.0 ELSE 0.0 END) AS AvgDelayRate FROM flights.optimized.flights WHERE Cancelled = false AND Diverted = false AND ArrDel15 IS NOT NULL GROUP BY DistanceGroup ), AirportDelayRates AS ( SELECT Dest AS DestinationAirport, DestCityName AS DestinationCity, DestState AS DestinationState, ArrTimeBlk AS ArrivalTimeBlock, DistanceGroup, COUNT(*) AS TotalFlights, AVG(CASE WHEN ArrDel15 = 1 THEN 1.0 ELSE 0.0 END) AS DelayRate FROM flights.optimized.flights WHERE Cancelled = false AND Diverted = false AND ArrDel15 IS NOT NULL GROUP BY Dest, DestCityName, DestState, ArrTimeBlk, DistanceGroup HAVING COUNT(*) > 50 ) SELECT adr.DestinationAirport, adr.DestinationCity, adr.DestinationState, adr.ArrivalTimeBlock, adr.DistanceGroup, adr.TotalFlights, ROUND(adr.DelayRate * 100, 2) AS ArrivalDelayRatePercent, ROUND(dga.AvgDelayRate * 100, 2) AS AvgDistanceGroupDelayRatePercent, ROUND((adr.DelayRate - dga.AvgDelayRate) * 100, 2) AS DelayRateDifferenceFromAverage, ROUND(AVG(ArrDelayMinutes) FILTER (WHERE ArrDel15 = 1), 2) AS AvgDelayDurationMinutes FROM AirportDelayRates adr JOIN DistanceGroupAverages dga ON adr.DistanceGroup = dga.DistanceGroup GROUP BY adr.DestinationAirport, adr.DestinationCity, adr.DestinationState, adr.ArrivalTimeBlock, adr.DistanceGroup, adr.TotalFlights, adr.DelayRate, dga.AvgDelayRate ORDER BY adr.DestinationAirport, adr.DistanceGroup, adr.ArrivalTimeBlock;"
    },
    {
      "queryid": "a7972ec2-5b53-4411-b5e7-cb4f9f14f25b",
      "query": "WITH DistanceGroupAverages AS ( SELECT distancegroup, AVG(CASE WHEN arrdelayminutes >= 15 THEN 1 ELSE 0 END) AS avgdelayrate FROM flights.optimized.flights_partitioned WHERE cancelled = false AND diverted = false AND arrdelayminutes IS NOT NULL GROUP BY distancegroup ), AirportDelayRates AS ( SELECT dest AS destinationairport, destcityname, deststate, deptimeblk, distancegroup, COUNT(*) AS totalflights, AVG(CASE WHEN arrdelayminutes >= 15 THEN 1 ELSE 0 END) AS delayrate, AVG(arrdelayminutes) AS avgarrdelayminutes FROM flights.optimized.flights_partitioned WHERE cancelled = false AND diverted = false AND arrdelayminutes IS NOT NULL GROUP BY dest, destcityname, deststate, deptimeblk, distancegroup HAVING COUNT(*) > 50 ) SELECT adr.destinationairport, adr.destcityname AS destinationcity, adr.deststate AS destinationstate, adr.deptimeblk, adr.distancegroup, adr.totalflights, ROUND(adr.delayrate * 100, 2) AS arrivaldelayratepercent, ROUND(dga.avgdelayrate * 100, 2) AS avgdistancegroupdelayratepercent, ROUND((adr.delayrate - dga.avgdelayrate) * 100, 2) AS delayratedifferencefromaverage, ROUND(AVG(CASE WHEN avgarrdelayminutes >= 15 THEN avgarrdelayminutes END), 2) AS avgdelaydurationminutes FROM airportdelayrates adr JOIN distancegroupaverages dga ON adr.distancegroup = dga.distancegroup GROUP BY adr.destinationairport, adr.destcityname, adr.deststate, adr.deptimeblk, adr.distancegroup, adr.totalflights, adr.delayrate, dga.avgdelayrate ORDER BY adr.destinationairport, adr.distancegroup, adr.deptimeblk;"
    },
    {
      "queryid": "207ef12b-a027-4624-9ac5-0231bfeda82b",
      "query": "WITH winter_flights AS (SELECT origin, dest, COUNT(*) AS winter_flights, SUM(CASE WHEN cancelled = True THEN 1 ELSE 0 END) AS winter_cancelled FROM flights.optimized.flights_partitioned WHERE MONTH IN (12, 1, 2) GROUP BY origin, dest), spring_flights AS (SELECT origin, dest, COUNT(*) AS spring_flights, SUM(CASE WHEN cancelled = True THEN 1 ELSE 0 END) AS spring_cancelled FROM flights.optimized.flights_partitioned WHERE MONTH IN (3, 4, 5) GROUP BY origin, dest), summer_flights AS (SELECT origin, dest, COUNT(*) AS summer_flights, SUM(CASE WHEN cancelled = True THEN 1 ELSE 0 END) AS summer_cancelled FROM flights.optimized.flights_partitioned WHERE MONTH IN (6, 7, 8) GROUP BY origin, dest), fall_flights AS (SELECT origin, dest, COUNT(*) AS fall_flights, SUM(CASE WHEN cancelled = True THEN 1 ELSE 0 END) AS fall_cancelled FROM flights.optimized.flights_partitioned WHERE MONTH IN (9, 10, 11) GROUP BY origin, dest) SELECT OriginCityName || ' → ' || DestCityName AS CityPair, OriginCityName, DestCityName, COUNT(*) AS TotalFlights, SUM(CASE WHEN cancelled = True THEN 1 ELSE 0 END) AS CancelledFlights, ROUND(SUM(CASE WHEN cancelled = True THEN 1 ELSE 0 END) * 100.0 / COUNT(*), 2) AS CancellationRate, winter_flights.winter_flights AS WinterFlights, winter_flights.winter_cancelled AS WinterCancelled, ROUND(winter_flights.winter_cancelled * 100.0 / NULLIF(winter_flights.winter_flights, 0), 2) AS WinterCancellationRate, spring_flights.spring_flights AS SpringFlights, spring_flights.spring_cancelled AS SpringCancelled, ROUND(spring_flights.spring_cancelled * 100.0 / NULLIF(spring_flights.spring_flights, 0), 2) AS SpringCancellationRate, summer_flights.summer_flights AS SummerFlights, summer_flights.summer_cancelled AS SummerCancelled, ROUND(summer_flights.summer_cancelled * 100.0 / NULLIF(summer_flights.summer_flights, 0), 2) AS SummerCancellationRate, fall_flights.fall_flights AS FallFlights, fall_flights.fall_cancelled AS FallCancelled, ROUND(fall_flights.fall_cancelled * 100.0 / NULLIF(fall_flights.fall_flights, 0), 2) AS FallCancellationRate FROM flights.optimized.flights_partitioned GROUP BY OriginCityName, DestCityName HAVING COUNT(*) > 100 ORDER BY CancellationRate DESC LIMIT 50"
    },
    {
      "queryid": "1c76f499-bc7d-4151-b832-2159698bb251",
      "query": "WITH RoutePerformance AS ( SELECT origin, dest, COUNT(*) AS FlightFrequency, AVG(CASE WHEN depdel15 = 0 THEN 1.0 ELSE 0.0 END) AS OnTimeDepartureRate, AVG(CASE WHEN arrdel15 = 0 THEN 1.0 ELSE 0.0 END) AS OnTimeArrivalRate FROM flights.optimized.flights_partitioned WHERE NOT cancelled AND NOT diverted GROUP BY origin, dest HAVING COUNT(*) > 100 ) SELECT CORR(FlightFrequency, OnTimeDepartureRate) AS Frequency_DepartureCorrelation, CORR(FlightFrequency, OnTimeArrivalRate) AS Frequency_ArrivalCorrelation, COUNT(*) AS TotalRoutesAnalyzed, MIN(FlightFrequency) AS MinRouteFrequency, MAX(FlightFrequency) AS MaxRouteFrequency, AVG(FlightFrequency) AS AvgRouteFrequency FROM RoutePerformance"
    },
    {
      "queryid": "6eb3dac9-e27a-462c-ac95-a33eff0c2695",
      "query": "WITH cte AS (SELECT distancegroup, COUNT(*) AS totalflights, AVG(distance) AS avgdistance, AVG(airtime) AS avgairtime, AVG(crselapsedtime) AS avgcrselapsedtime FROM flights.optimized.flights_partitioned WHERE cancelled = FALSE AND diverted = FALSE AND distance > 0 AND airtime IS NOT NULL AND crselapsedtime IS NOT NULL GROUP BY distancegroup) SELECT distancegroup, totalflights, ROUND(avgdistance, 2) AS avgdistance, ROUND(avgairtime, 2) AS avgairtime, ROUND(avgairtime / NULLIF(avgdistance, 0), 4) AS avgminutespermile, ROUND(avgcrselapsedtime / NULLIF(avgdistance, 0), 4) AS avgscheduledminutespermile, ROUND((avgminutespermile - MIN(CASE WHEN distancegroup = 1 THEN avgminutespermile END)) * 100.0 / MIN(CASE WHEN distancegroup = 1 THEN avgminutespermile END), 2) AS efficiencydeviationfromshortest, ROUND(SUM(CASE WHEN airtime > crselapsedtime THEN 1 ELSE 0 END) * 100.0 / totalflights, 2) AS percentflightsexceedingscheduledairtime FROM cte GROUP BY distancegroup ORDER BY distancegroup"
    },
    {
      "queryid": "2f4177b6-e7e6-4cf8-88a6-1bac1589c374",
      "query": "SELECT DistanceGroup, COUNT(*) AS TotalFlights, SUM(CASE WHEN Cancelled THEN 1 ELSE 0 END) AS CancelledFlights, ROUND(SUM(CASE WHEN Cancelled THEN 1 ELSE 0 END) * 100.0 / COUNT(*), 2) AS CancellationRatePercent, ROUND(AVG(Distance), 2) AS AvgDistanceMiles, ROUND(AVG(Month), 2) AS AvgMonth, ROUND(AVG(DayOfWeek), 2) AS AvgDayOfWeek FROM flights.optimized.flights_partitioned GROUP BY DistanceGroup HAVING COUNT(*) > 100 /* Filter for statistically significant distance groups*/ ORDER BY CancellationRatePercent DESC;"
    },
    {
      "queryid": "ebfe26f2-8f45-4038-9eb2-148696d26292",
      "query": "WITH AirlineHubFlights AS ( /* Count flights.optimized.flights per airline per origin airport*/ SELECT Operating_Airline, Origin AS HubAirport, COUNT(*) AS FlightCount, /* Rank airports by flight count for each airline*/ RANK() OVER (PARTITION BY Operating_Airline ORDER BY COUNT(*) DESC) AS HubRank FROM flights.optimized.flights WHERE NOT Cancelled AND NOT Diverted GROUP BY Operating_Airline, Origin HAVING COUNT(*) > 100 /* Only consider airports with significant flight volume*/ ), PrimaryHubs AS ( /* Select only the primary hub for each airline (HubRank = 1)*/ SELECT Operating_Airline, HubAirport FROM AirlineHubFlights WHERE HubRank = 1 ), AirlineTaxiEfficiency AS ( /* Calculate taxi-out metrics at primary hubs*/ SELECT f.Operating_Airline, h.HubAirport, COUNT(*) AS TotalFlights, ROUND(AVG(f.TaxiOut), 2) AS AvgTaxiOut, ROUND(STDDEV(f.TaxiOut), 2) AS TaxiOutStdDev, ROUND(AVG(CASE WHEN f.DepDel15 = 0 THEN f.TaxiOut END), 2) AS AvgTaxiOutOnTime, ROUND(AVG(CASE WHEN f.DepDel15 = 1 THEN f.TaxiOut END), 2) AS AvgTaxiOutDelayed, ROUND(SUM(CASE WHEN f.DepDel15 = 0 THEN 1 ELSE 0 END) * 100.0 / COUNT(*), 2) AS OnTimeDepartureRate FROM flights.optimized.flights f JOIN PrimaryHubs h ON f.Operating_Airline = h.Operating_Airline AND f.Origin = h.HubAirport WHERE NOT f.Cancelled AND NOT f.Diverted AND f.TaxiOut IS NOT NULL AND f.TaxiOut > 0 /* Filter out potentially invalid taxi-out times*/ GROUP BY f.Operating_Airline, h.HubAirport HAVING COUNT(*) > 500 /* Ensure sufficient data for reliable metrics */ ) SELECT Operating_Airline, HubAirport, TotalFlights, AvgTaxiOut, TaxiOutStdDev, AvgTaxiOutOnTime, AvgTaxiOutDelayed, OnTimeDepartureRate, /* Rank airlines by taxi-out efficiency*/ RANK() OVER (ORDER BY AvgTaxiOut ASC) AS TaxiEfficiencyRank FROM AirlineTaxiEfficiency ORDER BY TaxiEfficiencyRank;"
    },
    {
      "queryid": "9f984b51-91b7-4101-8cdd-77564460c3ea",
      "query": "WITH operation_type AS (SELECT CASE WHEN operated_or_branded_code_share_partners IS NOT NULL AND operated_or_branded_code_share_partners != '' AND operated_or_branded_code_share_partners != 'NA' THEN 'Code-Share Operation' ELSE 'Regular Operation' END AS OperationType FROM flights.optimized.flights WHERE NOT cancelled AND NOT diverted AND depdel15 IS NOT NULL AND arrdel15 IS NOT NULL AND flightdate >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '12 months') SELECT Operating_Airline, OperationType, COUNT(*) AS TotalFlights, ROUND(AVG(CASE WHEN depdel15 = 1 THEN 1 ELSE 0 END) * 100, 2) AS DepartureDelayRate, ROUND(AVG(CASE WHEN arrdel15 = 1 THEN 1 ELSE 0 END) * 100, 2) AS ArrivalDelayRate, ROUND(AVG(depdelayminutes), 2) AS AvgDepartureDelayMinutes, ROUND(AVG(arrdelayminutes), 2) AS AvgArrivalDelayMinutes, ROUND(AVG(CASE WHEN depdel15 = 0 THEN 1 ELSE 0 END) * 100, 2) AS OnTimeDepartureRate, ROUND(AVG(CASE WHEN arrdel15 = 0 THEN 1 ELSE 0 END) * 100, 2) AS OnTimeArrivalRate FROM flights.optimized.flights WHERE NOT cancelled AND NOT diverted AND depdel15 IS NOT NULL AND arrdel15 IS NOT NULL AND flightdate >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '12 months' GROUP BY Operating_Airline, OperationType HAVING COUNT(*) > 100 ORDER BY Operating_Airline, OperationType"
    },
    {
      "queryid": "d50a8dfe-6f77-43cc-ad6a-f3e8a18aa1e0",
      "query": "WITH aircraft_type AS (SELECT operating_airline, CASE WHEN REGEXP_LIKE(tail_number, '^N[0-9][A-Z]{4}$') THEN 'N + 1 digit + 4 letters' WHEN REGEXP_LIKE(tail_number, '^N[0-9]{2}[A-Z]{3}$') THEN 'N + 2 digits + 3 letters' WHEN REGEXP_LIKE(tail_number, '^N[0-9][A-Z]{3}$') THEN 'N + 1 digit + 3 letters' WHEN REGEXP_LIKE(tail_number, '^N[0-9]{3}[A-Z]{2}$') THEN 'N + 3 digits + 2 letters' WHEN REGEXP_LIKE(tail_number, '^N[0-9]{2}[A-Z]{2}$') THEN 'N + 2 digits + 2 letters' WHEN REGEXP_LIKE(tail_number, '^N[0-9]{4}[A-Z]$') THEN 'N + 4 digits + 1 letter' WHEN REGEXP_LIKE(tail_number, '^N[0-9]{3}[A-Z]$') THEN 'N + 3 digits + 1 letter' WHEN REGEXP_LIKE(tail_number, '^N[0-9]{5}$') THEN 'N + 5 digits' WHEN REGEXP_LIKE(tail_number, '^N[0-9]{4}$') THEN 'N + 4 digits' WHEN REGEXP_LIKE(tail_number, '^N[0-9]{3}$') THEN 'N + 3 digits' WHEN REGEXP_LIKE(tail_number, '^N[0-9]{2}$') THEN 'N + 2 digits' WHEN REGEXP_LIKE(tail_number, '^N[0-9]$') THEN 'N + 1 digit' ELSE 'Other' END AS aircrafttypecategory FROM flights.optimized.flights WHERE tail_number IS NOT NULL AND operating_airline IS NOT NULL AND depdel15 IS NOT NULL AND (cancelled = false OR cancelled IS NULL) AND (diverted = false OR diverted IS NULL)) SELECT operating_airline, aircrafttypecategory, COUNT(*) AS totalflights, SUM(CASE WHEN depdel15 = 1 THEN 1 ELSE 0 END) AS delayedflights, ROUND(CAST(SUM(CASE WHEN depdel15 = 1 THEN 1 ELSE 0 END) AS DOUBLE) * 100.0 / COUNT(*), 2) AS delaypercentage FROM aircraft_type GROUP BY operating_airline, aircrafttypecategory HAVING COUNT(*) > 50 ORDER BY operating_airline, delaypercentage DESC"
    },
    {
      "queryid": "3e6e6491-e2ec-4741-9007-ba9580615736",
      "query": "WITH delayed_flights AS (SELECT operating_airline, COUNT(*) AS total_flights, SUM(CASE WHEN depdel15 = 1 THEN 1 ELSE 0 END) AS delayed_departures, SUM(CASE WHEN depdel15 = 1 AND arrdel15 = 0 THEN 1 ELSE 0 END) AS recovered_flights, SUM(CASE WHEN depdel15 = 1 AND arrdel15 = 1 THEN 1 ELSE 0 END) AS unrecovered_flights FROM flights.optimized.flights_partitioned WHERE cancelled = false AND diverted = false AND depdel15 IS NOT NULL AND arrdel15 IS NOT NULL GROUP BY operating_airline HAVING SUM(CASE WHEN depdel15 = 1 THEN 1 ELSE 0 END) > 100) SELECT operating_airline, total_flights, delayed_departures, recovered_flights, unrecovered_flights, ROUND((recovered_flights * 100.0 / NULLIF(delayed_departures, 0)), 2) AS recovery_rate_percent, ROUND(AVG(CASE WHEN depdel15 = 1 THEN depdelayminutes END), 2) AS avg_departure_delay_for_delayed_flights, ROUND(AVG(CASE WHEN depdel15 = 1 AND arrdel15 = 0 THEN depdelayminutes END), 2) AS avg_departure_delay_for_recovered_flights, ROUND(AVG(CASE WHEN depdel15 = 1 AND arrdel15 = 1 THEN (arrdelayminutes - depdelayminutes) END), 2) AS avg_delay_increase_during_flight FROM delayed_flights GROUP BY operating_airline ORDER BY recovery_rate_percent DESC"
    },
    {
      "queryid": "b5c9bdcd-17ac-44bb-a246-756b9fad907a",
      "query": "WITH estimated_passengers AS (SELECT FlightDate, DistanceGroup, COUNT(*) AS TotalFlights, SUM(CASE WHEN DepDel15 = 1 THEN 1 ELSE 0 END) AS DelayedFlights, SUM(CASE WHEN DepDel15 = 1 AND DistanceGroup <= 2 THEN 1 ELSE 0 END) * 120 AS EstimatedPassengersShortHaul, SUM(CASE WHEN DepDel15 = 1 AND DistanceGroup BETWEEN 3 AND 4 THEN 1 ELSE 0 END) * 150 AS EstimatedPassengersMediumHaul, SUM(CASE WHEN DepDel15 = 1 AND DistanceGroup >= 5 THEN 1 ELSE 0 END) * 180 AS EstimatedPassengersLongHaul, (SUM(CASE WHEN DepDel15 = 1 AND DistanceGroup <= 2 THEN 1 ELSE 0 END) * 120 + SUM(CASE WHEN DepDel15 = 1 AND DistanceGroup BETWEEN 3 AND 4 THEN 1 ELSE 0 END) * 150 + SUM(CASE WHEN DepDel15 = 1 AND DistanceGroup >= 5 THEN 1 ELSE 0 END) * 180) AS TotalEstimatedAffectedPassengers, ROUND(SUM(CASE WHEN DepDel15 = 1 THEN 1 ELSE 0 END) * 100.0 / COUNT(*), 2) AS DelayRatePercentage FROM flights.optimized.flights WHERE Cancelled = false AND Diverted = false GROUP BY FlightDate, DistanceGroup) SELECT FlightDate, DistanceGroup, TotalFlights, DelayedFlights, EstimatedPassengersShortHaul, EstimatedPassengersMediumHaul, EstimatedPassengersLongHaul, TotalEstimatedAffectedPassengers, DelayRatePercentage FROM estimated_passengers ORDER BY FlightDate DESC, TotalEstimatedAffectedPassengers DESC"
    },
    {
      "queryid": "d576f288-9d34-4f78-a185-49501d43e01d",
      "query": "WITH departure_time_blocks AS ( SELECT deptimeblk, COUNT(*) AS totalflights, SUM(CASE WHEN depdel15 = 1 THEN 1 ELSE 0 END) AS delayeddepartures, ROUND(AVG(CASE WHEN depdel15 = 1 THEN depdelay END), 2) AS avgdeparturedelay, ROUND(AVG(CASE WHEN depdel15 = 1 THEN arrdelay END), 2) AS avgarrivaldelay, ROUND(AVG(CASE WHEN depdel15 = 1 THEN depdelay - arrdelay END), 2) AS avgdelayrecoveryminutes, ROUND(SUM(CASE WHEN depdel15 = 1 AND arrdelay < depdelay THEN 1 ELSE 0 END) * 100.0 / NULLIF(SUM(CASE WHEN depdel15 = 1 THEN 1 ELSE 0 END), 0), 2) AS percentflightsrecoveredtime, ROUND(AVG(CASE WHEN depdel15 = 1 AND arrdelay < depdelay THEN depdelay - arrdelay END), 2) AS avgminutesrecovered, ROUND(AVG(CASE WHEN depdel15 = 1 AND arrdelay >= depdelay THEN depdelay - arrdelay END), 2) AS avgdelaygrowth FROM flights.optimized.flights WHERE NOT cancelled AND NOT diverted AND depdelay IS NOT NULL AND arrdelay IS NOT NULL AND deptimeblk IS NOT NULL GROUP BY deptimeblk ) SELECT deptimeblk AS DepartureTimeBlock, totalflights, delayeddepartures, avgdeparturedelay, avgarrivaldelay, avgdelayrecoveryminutes, percentflightsrecoveredtime, avgminutesrecovered, avgdelaygrowth FROM departure_time_blocks ORDER BY SUBSTRING(deptimeblk FROM 1 FOR 2) ASC"
    },
    {
      "queryid": "4ab2b57f-2806-4eba-9ded-48630300e5b4",
      "query": "WITH FlightPeriods AS ( SELECT Operating_Airline, Month, DayofMonth, Cancelled, CASE WHEN Month = 11 AND DayofMonth BETWEEN 20 AND 30 THEN 'Thanksgiving' WHEN (Month = 12 AND DayofMonth >= 20) OR (Month = 1 AND DayofMonth <= 5) THEN 'Christmas_New_Year' ELSE 'Regular' END AS PeriodType FROM flights.optimized.flights ), CancellationRates AS ( SELECT Operating_Airline, PeriodType, COUNT(*) AS TotalFlights, SUM(CASE WHEN Cancelled = true THEN 1 ELSE 0 END) AS CancelledFlights, ROUND(SUM(CASE WHEN Cancelled = true THEN 1 ELSE 0 END) * 100.0 / COUNT(*), 2) AS CancellationRate FROM FlightPeriods GROUP BY Operating_Airline, PeriodType HAVING COUNT(*) > 100 ), RegularRates AS ( SELECT Operating_Airline, CancellationRate AS RegularCancellationRate FROM CancellationRates WHERE PeriodType = 'Regular' ) SELECT cr.Operating_Airline, cr.PeriodType, cr.CancellationRate AS HolidayCancellationRate, rr.RegularCancellationRate, cr.CancellationRate - rr.RegularCancellationRate AS RateDifference, ROUND((cr.CancellationRate - rr.RegularCancellationRate) * 100.0 / NULLIF(rr.RegularCancellationRate, 0), 2) AS PercentIncrease FROM CancellationRates cr JOIN RegularRates rr ON cr.Operating_Airline = rr.Operating_Airline WHERE cr.PeriodType IN ('Thanksgiving', 'Christmas_New_Year') ORDER BY cr.PeriodType, RateDifference DESC"
    },
    {
      "queryid": "e4b0a2ef-1155-46fd-8b66-c364ae03783f",
      "query": "WITH MonthlyData AS ( SELECT year, month, COUNT(*) AS airtrafficvolume, AVG(depdelayminutes) AS avgdeparturedelay FROM flights.optimized.flights_partitioned WHERE (cancelled IS NULL OR cancelled = false) AND ((year = 2019 AND month <= EXTRACT(MONTH FROM CURRENT_DATE)) OR (year = 2019 - 1 AND month > EXTRACT(MONTH FROM CURRENT_DATE))) GROUP BY year, month ), CorrelationCalc AS ( SELECT CASE WHEN (COUNT(*) * SUM(airtrafficvolume * airtrafficvolume) - SUM(airtrafficvolume) * SUM(airtrafficvolume)) * (COUNT(*) * SUM(avgdeparturedelay * avgdeparturedelay) - SUM(avgdeparturedelay) * SUM(avgdeparturedelay)) = 0 THEN NULL ELSE (COUNT(*) * SUM(airtrafficvolume * avgdeparturedelay) - SUM(airtrafficvolume) * SUM(avgdeparturedelay)) / SQRT((COUNT(*) * SUM(airtrafficvolume * airtrafficvolume) - SUM(airtrafficvolume) * SUM(airtrafficvolume)) * (COUNT(*) * SUM(avgdeparturedelay * avgdeparturedelay) - SUM(avgdeparturedelay) * SUM(avgdeparturedelay))) END AS delayvolume_correlation FROM MonthlyData ) SELECT md.year, md.month, md.airtrafficvolume, md.avgdeparturedelay, cc.delayvolume_correlation AS delayvolume_correlation FROM MonthlyData md CROSS JOIN CorrelationCalc cc ORDER BY md.year, md.month;"
    },
    {
      "queryid": "19b36ab4-3822-407c-9f98-fcb38bf758ba",
      "query": "WITH RouteClassification AS ( SELECT Origin, Dest, OriginCityName, DestCityName, SUM(CASE WHEN DayOfWeek BETWEEN 1 AND 5 THEN 1 ELSE 0 END) AS WeekdayFlights, SUM(CASE WHEN DayOfWeek BETWEEN 6 AND 7 THEN 1 ELSE 0 END) AS WeekendFlights, SUM(CASE WHEN DepTimeBlk IN ('0500-0559', '0600-0659', '0700-0759', '0800-0859', '0900-0959') THEN 1 ELSE 0 END) AS MorningFlights, SUM(CASE WHEN DepTimeBlk IN ('1600-1659', '1700-1759', '1800-1859', '1900-1959') THEN 1 ELSE 0 END) AS EveningFlights, SUM(CASE WHEN DepTimeBlk IN ('1000-1059', '1100-1159', '1200-1259', '1300-1359', '1400-1459', '1500-1559') THEN 1 ELSE 0 END) AS MiddayFlights, SUM(CASE WHEN DepTimeBlk IN ('2000-2059', '2100-2159', '2200-2259', '2300-2359', '0001-0559','0000-0059', '0100-0159', '0200-0259', '0300-0359', '0400-0459') THEN 1 ELSE 0 END) AS MidnightFlights, SUM(CASE WHEN Origin IN ('JFK', 'LAX', 'ORD', 'DFW', 'SFO', 'BOS', 'ATL', 'EWR', 'IAD', 'SEA') AND Dest IN ('JFK', 'LAX', 'ORD', 'DFW', 'SFO', 'BOS', 'ATL', 'EWR', 'IAD', 'SEA') THEN 1 ELSE 0 END) AS BusinessHubFlights, SUM(CASE WHEN Dest IN ('LAS', 'MCO', 'FLL', 'MIA', 'BWI', 'SAN', 'HNL', 'SLC', 'TPA') THEN 1 ELSE 0 END) AS LeisureDestinationFlights FROM flights.optimized.flights_partitioned GROUP BY Origin, Dest, OriginCityName, DestCityName HAVING COUNT(*) > 100 ), BusinessLeisureRoutes AS ( SELECT Origin, Dest, OriginCityName, DestCityName, CASE WHEN (WeekdayFlights * 1.0 / NULLIF(WeekendFlights, 0) > 1.5 AND (MorningFlights + EveningFlights) * 1.0 / (MorningFlights + EveningFlights + MiddayFlights + MidnightFlights) > 0.5 AND BusinessHubFlights > 0) THEN 'Business-Heavy' WHEN (WeekendFlights * 1.0 / NULLIF(WeekdayFlights, 0) > 0.7 AND MiddayFlights * 1.0 / (MorningFlights + EveningFlights + MiddayFlights + MidnightFlights) > 0.4 AND LeisureDestinationFlights > 0) THEN 'Leisure' ELSE 'Mixed' END AS RouteType FROM RouteClassification ), DelayPatterns AS ( SELECT blr.RouteType, CASE WHEN f.DayOfWeek BETWEEN 1 AND 5 THEN 'Weekday' ELSE 'Weekend' END AS DayType, COUNT(*) AS TotalFlights, SUM(CASE WHEN f.DepDel15 = 1 THEN 1 ELSE 0 END) AS DelayedFlights, ROUND(SUM(CASE WHEN f.DepDel15 = 1 THEN 1 ELSE 0 END) * 100.0 / COUNT(*), 2) AS DelayRatePercent, ROUND(AVG(f.DepDelayMinutes), 2) AS AvgDelayMinutes, ROUND(AVG(f.TaxiOut), 2) AS AvgTaxiOut FROM flights.optimized.flights_partitioned f JOIN BusinessLeisureRoutes blr ON f.Origin = blr.Origin AND f.Dest = blr.Dest WHERE f.Cancelled = false AND f.Diverted = false GROUP BY blr.RouteType, CASE WHEN f.DayOfWeek BETWEEN 1 AND 5 THEN 'Weekday' ELSE 'Weekend' END ) SELECT RouteType, DayType, TotalFlights, DelayedFlights, DelayRatePercent, AvgDelayMinutes, AvgTaxiOut, ROUND(DelayRatePercent - (SELECT AVG(DelayRatePercent) FROM DelayPatterns), 2) AS DelayRateVsOverallAvg FROM DelayPatterns ORDER BY RouteType, DayType;"
    }
  ]
}