{
  "queries": [
    {
      "queryid": "10ba3c04-0f91-4ef3-a717-c1e0d33b31bc",
      "query": "WITH MonthlyFlightCounts AS (SELECT origin, month AS Month, COUNT(*) AS TotalFlights FROM flights.optimized.flights GROUP BY origin, month), TopAirportsByMonth AS (SELECT Month, origin, TotalFlights, RANK() OVER (PARTITION BY Month ORDER BY TotalFlights DESC) AS AirportRank FROM MonthlyFlightCounts), FilteredFlights AS (SELECT f.*, CASE WHEN f.deptimeblk IN ('0600-0659', '0700-0759', '0800-0859', '1600-1659', '1700-1759', '1800-1859') THEN 'Peak' ELSE 'Off-Peak' END AS TimeOfDay, f.month AS Month FROM flights.optimized.flights f JOIN TopAirportsByMonth t ON f.origin = t.origin AND f.month = t.Month WHERE f.cancelled = false AND f.diverted = false AND t.AirportRank <= 10) SELECT ff.Month, ff.origin AS Origin, ff.TimeOfDay, COUNT(*) AS TotalFlights, ROUND(AVG(ff.taxiout), 2) AS AvgTaxiOut, ROUND(AVG(ff.depdelay), 2) AS AvgDEPDelay, ROUND(AVG(ff.arrdelay), 2) AS AvgARRDelay, ROUND(CORR(ff.taxiout, ff.depdelay), 2) AS TaxiOut_DepDelay_Correlation, ROUND(CORR(ff.taxiout, ff.arrdelay), 2) AS TaxiOut_ArrDelay_Correlation, SUM(CASE WHEN ff.depdel15 = 1 THEN 1 ELSE 0 END) AS DelayedFlights, ROUND((SUM(CASE WHEN ff.depdel15 = 1 THEN 1 ELSE 0 END) * 100.0 / COUNT(*)), 2) AS PercentDelayed FROM FilteredFlights ff GROUP BY ff.Month, ff.origin, ff.TimeOfDay ORDER BY ff.Month DESC, ff.origin, ff.TimeOfDay;"
    },
    {
      "queryid": "8abd47c0-31cb-4ba0-891f-9bac53bbc909",
      "query": "WITH AirportDiscrepancy AS (SELECT origin AS Airport, origincityname AS AirportCity, originstate AS AirportState, 'Origin' AS AirportRole, COUNT(*) AS TotalFlights, AVG(actualelapsedtime - crselapsedtime) AS AvgDiscrepancy, AVG(depdelay) AS AvgDepDelay, AVG(depdelayminutes) AS AvgDepDelayMinutes, AVG(taxiout) AS AvgTaxiOut, AVG(CASE WHEN depdel15 = 1 THEN 1 ELSE 0 END) AS PercentDelayedDepartures, AVG(CASE WHEN diverted THEN 1 ELSE 0 END) AS PercentDiverted, AVG(CASE WHEN cancelled THEN 1 ELSE 0 END) AS PercentCancelled FROM flights.optimized.flights WHERE crselapsedtime IS NOT NULL AND actualelapsedtime IS NOT NULL AND crselapsedtime > 0 AND cancelled = false GROUP BY origin, origincityname, originstate UNION ALL SELECT dest AS Airport, destcityname AS AirportCity, deststate AS AirportState, 'Destination' AS AirportRole, COUNT(*) AS TotalFlights, AVG(actualelapsedtime - crselapsedtime) AS AvgDiscrepancy, AVG(arrdelay) AS AvgDepDelay, AVG(arrdelayminutes) AS AvgDepDelayMinutes, AVG(taxiin) AS AvgTaxiOut, AVG(CASE WHEN arrdel15 = 1 THEN 1 ELSE 0 END) AS PercentDelayedDepartures, AVG(CASE WHEN diverted THEN 1 ELSE 0 END) AS PercentDiverted, AVG(CASE WHEN cancelled THEN 1 ELSE 0 END) AS PercentCancelled FROM flights.optimized.flights WHERE crselapsedtime IS NOT NULL AND actualelapsedtime IS NOT NULL AND crselapsedtime > 0 AND cancelled = false GROUP BY dest, destcityname, deststate), RankedAirports AS (SELECT *, RANK() OVER (ORDER BY AvgDiscrepancy DESC) AS DiscrepancyRank FROM AirportDiscrepancy WHERE TotalFlights > 1000) SELECT Airport, AirportCity, AirportState, AirportRole, TotalFlights, ROUND(AvgDiscrepancy, 2) AS AvgDiscrepancyMinutes, ROUND(AvgDepDelay, 2) AS AvgDelayMinutes, ROUND(AvgDepDelayMinutes, 2) AS AvgDelayMinutesNonNegative, ROUND(AvgTaxiOut, 2) AS AvgTaxiTimeMinutes, ROUND(PercentDelayedDepartures * 100, 2) AS PercentDelayedFlights, ROUND(PercentDiverted * 100, 2) AS PercentDivertedFlights, ROUND(PercentCancelled * 100, 2) AS PercentCancelledFlights, DiscrepancyRank FROM RankedAirports WHERE DiscrepancyRank <= 20 ORDER BY DiscrepancyRank;"
    },
    {
      "queryid": "38a70da3-f3f2-48e9-896d-4f9303598967",
      "query": "SELECT operating_airline AS Airline, dayofweek AS DayOfWeek, COUNT(*) AS TotalFlights, ROUND(AVG(depdelayminutes), 2) AS AvgDepartureDelayMinutes, SUM(CASE WHEN depdel15 = 0 THEN 1 ELSE 0 END) AS OnTimeFlights, ROUND((SUM(CASE WHEN depdel15 = 0 THEN 1 ELSE 0 END) * 100.0 / COUNT(*)), 2) AS OnTimePerformancePercent FROM flights.optimized.flights WHERE cancelled = false AND diverted = false AND depdelayminutes IS NOT NULL GROUP BY operating_airline, dayofweek ORDER BY OnTimePerformancePercent DESC, AvgDepartureDelayMinutes ASC;"
    },
    {
      "queryid": "eee49065-116e-456a-83d9-0e0ef8083086",
      "query": "WITH MajorAirports AS (SELECT origin AS Airport, origincityname AS AirportCity, COUNT(*) AS TotalFlights FROM flights.optimized.flights GROUP BY origin, origincityname ORDER BY TotalFlights DESC LIMIT 10), PeakHoursFlights AS (SELECT f.origin AS Airport, m.AirportCity, f.deptimeblk AS DepTimeBlk, f.taxiout AS TaxiOut, f.depdelayminutes AS DepDelayMinutes, f.depdel15 AS DepDel15 FROM flights.optimized.flights f JOIN MajorAirports m ON f.origin = m.Airport WHERE f.cancelled = false AND f.diverted = false AND f.taxiout IS NOT NULL AND f.depdelayminutes IS NOT NULL AND f.deptimeblk IN ('0600-0659', '0700-0759', '0800-0859', '1600-1659', '1700-1759', '1800-1859')) SELECT Airport, AirportCity, DepTimeBlk, COUNT(*) AS TotalFlights, ROUND(AVG(TaxiOut), 2) AS AvgTaxiOutMinutes, ROUND(AVG(DepDelayMinutes), 2) AS AvgDepartureDelayMinutes, ROUND(CORR(TaxiOut, DepDelayMinutes), 3) AS TaxiOut_DepDelay_Correlation, SUM(CASE WHEN DepDel15 = 1 THEN 1 ELSE 0 END) AS DelayedFlights, ROUND((SUM(CASE WHEN DepDel15 = 1 THEN 1 ELSE 0 END) * 100.0 / COUNT(*)), 2) AS PercentDelayed15Plus, ROUND(AVG(CASE WHEN TaxiOut <= 10 THEN DepDelayMinutes END), 2) AS AvgDelay_TaxiOut_0_10, ROUND(AVG(CASE WHEN TaxiOut > 10 AND TaxiOut <= 20 THEN DepDelayMinutes END), 2) AS AvgDelay_TaxiOut_11_20, ROUND(AVG(CASE WHEN TaxiOut > 20 THEN DepDelayMinutes END), 2) AS AvgDelay_TaxiOut_20Plus FROM PeakHoursFlights GROUP BY Airport, AirportCity, DepTimeBlk ORDER BY Airport, DepTimeBlk;"
    },
    {
      "queryid": "d7e84363-86f7-47a2-851f-41a793fea732",
      "query": "SELECT origin AS Airport, origincityname AS AirportCity, originstate AS AirportState, COUNT(*) AS TotalFlights, SUM(CASE WHEN depdel15 = 1 THEN 1 ELSE 0 END) AS DelayedFlights, ROUND((SUM(CASE WHEN depdel15 = 1 THEN 1 ELSE 0 END) * 100.0 / COUNT(*)), 2) AS PercentDelayedFlights, ROUND(AVG(depdelay), 2) AS AvgDepartureDelayMinutes, ROUND(AVG(taxiout), 2) AS AvgTaxiOutMinutes FROM flights.optimized.flights WHERE cancelled = false AND diverted = false AND depdel15 IS NOT NULL AND depdelay IS NOT NULL AND taxiout IS NOT NULL GROUP BY origin, origincityname, originstate HAVING COUNT(*) > 1000 ORDER BY PercentDelayedFlights DESC, AvgDepartureDelayMinutes DESC LIMIT 20;"
    },
    {
      "queryid": "20eca341-19e1-4d85-a75d-07d9253ff06d",
      "query": "SELECT distancegroup AS DistanceGroup, COUNT(*) AS TotalFlights, ROUND(CORR(depdelayminutes, arrdelayminutes), 3) AS DelayCorrelation, ROUND(AVG(depdelayminutes), 2) AS AvgDepartureDelayMinutes, ROUND(AVG(arrdelayminutes), 2) AS AvgArrivalDelayMinutes, ROUND(SUM(CASE WHEN depdel15 = 1 THEN 1 ELSE 0 END) * 100.0 / COUNT(*), 2) AS PercentDelayedDepartures, ROUND(SUM(CASE WHEN arrdel15 = 1 THEN 1 ELSE 0 END) * 100.0 / COUNT(*), 2) AS PercentDelayedArrivals FROM flights.optimized.flights WHERE cancelled = false AND diverted = false AND depdelayminutes IS NOT NULL AND arrdelayminutes IS NOT NULL AND distancegroup IS NOT NULL GROUP BY distancegroup ORDER BY distancegroup;"
    },
    {
      "queryid": "aaf7984c-796c-4df7-b29f-e63362d1823d",
      "query": "SELECT CASE WHEN distance < 500 THEN 'Short-Haul (<500 miles)' WHEN distance > 1500 THEN 'Long-Haul (>1500 miles)' END AS FlightCategory, departuredelaygroups AS DepartureDelayGroups, COUNT(*) AS FlightCount, ROUND(COUNT(*) * 100.0 / SUM(COUNT(*)) OVER (PARTITION BY CASE WHEN distance < 500 THEN 'Short-Haul (<500 miles)' WHEN distance > 1500 THEN 'Long-Haul (>1500 miles)' END), 2) AS PercentageOfCategory, ROUND(AVG(depdelayminutes), 2) AS AvgDelayMinutes, ROUND(SUM(CASE WHEN depdel15 = 1 THEN 1 ELSE 0 END) * 100.0 / COUNT(*), 2) AS PercentDelayed15Plus FROM flights.optimized.flights WHERE cancelled = false AND diverted = false AND distance IS NOT NULL AND departuredelaygroups IS NOT NULL AND (distance < 500 OR distance > 1500) GROUP BY 1, departuredelaygroups ORDER BY 1, departuredelaygroups;"
    },
    {
      "queryid": "c1de9515-3da5-4440-a6d9-537e2cc4f5c8",
      "query": "WITH DistanceGroupAverages AS (SELECT distancegroup, AVG(CASE WHEN arrdel15 = 1 THEN 1.0 ELSE 0.0 END) AS AvgDelayRate FROM flights.optimized.flights WHERE cancelled = false AND diverted = false AND arrdel15 IS NOT NULL GROUP BY distancegroup), AirportDelayRates AS (SELECT dest AS DestinationAirport, destcityname AS DestinationCity, deststate AS DestinationState, arrtimeblk AS ArrivalTimeBlock, distancegroup, COUNT(*) AS TotalFlights, AVG(CASE WHEN arrdel15 = 1 THEN 1.0 ELSE 0.0 END) AS DelayRate FROM flights.optimized.flights WHERE cancelled = false AND diverted = false AND arrdel15 IS NOT NULL GROUP BY dest, destcityname, deststate, arrtimeblk, distancegroup HAVING COUNT(*) > 50) SELECT adr.DestinationAirport, adr.DestinationCity, adr.DestinationState, adr.ArrivalTimeBlock, adr.distancegroup, adr.TotalFlights, ROUND(adr.DelayRate * 100, 2) AS ArrivalDelayRatePercent, ROUND(dga.AvgDelayRate * 100, 2) AS AvgDistanceGroupDelayRatePercent, ROUND((adr.DelayRate - dga.AvgDelayRate) * 100, 2) AS DelayRateDifferenceFromAverage, ROUND(AVG(f.arrdelayminutes) FILTER (WHERE f.arrdel15 = 1), 2) AS AvgDelayDurationMinutes FROM AirportDelayRates adr JOIN DistanceGroupAverages dga ON adr.distancegroup = dga.distancegroup LEFT JOIN flights.optimized.flights f ON adr.DestinationAirport = f.dest AND adr.ArrivalTimeBlock = f.arrtimeblk AND adr.distancegroup = f.distancegroup AND f.cancelled = false AND f.diverted = false AND f.arrdel15 IS NOT NULL GROUP BY adr.DestinationAirport, adr.DestinationCity, adr.DestinationState, adr.ArrivalTimeBlock, adr.distancegroup, adr.TotalFlights, adr.DelayRate, dga.AvgDelayRate ORDER BY adr.DestinationAirport, adr.distancegroup, adr.ArrivalTimeBlock;"
    },
    {
      "queryid": "a7972ec2-5b53-4411-b5e7-cb4f9f14f25b",
      "query": "WITH DistanceGroupAverages AS (SELECT distancegroup, AVG(CASE WHEN arrdelayminutes >= 15 THEN 1 ELSE 0 END) AS AvgDelayRate FROM flights.optimized.flights WHERE cancelled = false AND diverted = false AND arrdelayminutes IS NOT NULL GROUP BY distancegroup), AirportDelayRates AS (SELECT dest AS DestinationAirport, destcityname, deststate, arrtimeblk, distancegroup, COUNT(*) AS TotalFlights, AVG(CASE WHEN arrdelayminutes >= 15 THEN 1 ELSE 0 END) AS DelayRate, AVG(arrdelayminutes) AS AvgArrDelayMinutes FROM flights.optimized.flights WHERE cancelled = false AND diverted = false AND arrdelayminutes IS NOT NULL GROUP BY dest, destcityname, deststate, arrtimeblk, distancegroup HAVING COUNT(*) > 50) SELECT adr.DestinationAirport, adr.destcityname AS DestinationCity, adr.deststate AS DestinationState, adr.arrtimeblk, adr.distancegroup, adr.TotalFlights, ROUND(adr.DelayRate * 100, 2) AS ArrivalDelayRatePercent, ROUND(dga.AvgDelayRate * 100, 2) AS AvgDistanceGroupDelayRatePercent, ROUND((adr.DelayRate - dga.AvgDelayRate) * 100, 2) AS DelayRateDifferenceFromAverage, ROUND(AVG(CASE WHEN AvgArrDelayMinutes >= 15 THEN AvgArrDelayMinutes END), 2) AS AvgDelayDurationMinutes FROM AirportDelayRates adr JOIN DistanceGroupAverages dga ON adr.distancegroup = dga.distancegroup GROUP BY adr.DestinationAirport, adr.destcityname, adr.deststate, adr.arrtimeblk, adr.distancegroup, adr.TotalFlights, adr.DelayRate, dga.AvgDelayRate ORDER BY adr.DestinationAirport, adr.distancegroup, adr.arrtimeblk;"
    },
    {
      "queryid": "207ef12b-a027-4624-9ac5-0231bfeda82b",
      "query": "SELECT origincityname || ' → ' || destcityname AS CityPair, origincityname AS OriginCityName, destcityname AS DestCityName, COUNT(*) AS TotalFlights, SUM(CASE WHEN cancelled = TRUE THEN 1 ELSE 0 END) AS CancelledFlights, ROUND(SUM(CASE WHEN cancelled = TRUE THEN 1 ELSE 0 END) * 100.0 / COUNT(*), 2) AS CancellationRate, SUM(CASE WHEN month IN (12, 1, 2) THEN 1 ELSE 0 END) AS WinterFlights, SUM(CASE WHEN month IN (12, 1, 2) AND cancelled = TRUE THEN 1 ELSE 0 END) AS WinterCancelled, ROUND(SUM(CASE WHEN month IN (12, 1, 2) AND cancelled = TRUE THEN 1 ELSE 0 END) * 100.0 / NULLIF(SUM(CASE WHEN month IN (12, 1, 2) THEN 1 ELSE 0 END), 0), 2) AS WinterCancellationRate, SUM(CASE WHEN month IN (3, 4, 5) THEN 1 ELSE 0 END) AS SpringFlights, SUM(CASE WHEN month IN (3, 4, 5) AND cancelled = TRUE THEN 1 ELSE 0 END) AS SpringCancelled, ROUND(SUM(CASE WHEN month IN (3, 4, 5) AND cancelled = TRUE THEN 1 ELSE 0 END) * 100.0 / NULLIF(SUM(CASE WHEN month IN (3, 4, 5) THEN 1 ELSE 0 END), 0), 2) AS SpringCancellationRate, SUM(CASE WHEN month IN (6, 7, 8) THEN 1 ELSE 0 END) AS SummerFlights, SUM(CASE WHEN month IN (6, 7, 8) AND cancelled = TRUE THEN 1 ELSE 0 END) AS SummerCancelled, ROUND(SUM(CASE WHEN month IN (6, 7, 8) AND cancelled = TRUE THEN 1 ELSE 0 END) * 100.0 / NULLIF(SUM(CASE WHEN month IN (6, 7, 8) THEN 1 ELSE 0 END), 0), 2) AS SummerCancellationRate, SUM(CASE WHEN month IN (9, 10, 11) THEN 1 ELSE 0 END) AS FallFlights, SUM(CASE WHEN month IN (9, 10, 11) AND cancelled = TRUE THEN 1 ELSE 0 END) AS FallCancelled, ROUND(SUM(CASE WHEN month IN (9, 10, 11) AND cancelled = TRUE THEN 1 ELSE 0 END) * 100.0 / NULLIF(SUM(CASE WHEN month IN (9, 10, 11) THEN 1 ELSE 0 END), 0), 2) AS FallCancellationRate FROM flights.optimized.flights GROUP BY origincityname, destcityname HAVING COUNT(*) > 100 ORDER BY CancellationRate DESC LIMIT 50;"
    },
    {
      "queryid": "1c76f499-bc7d-4151-b832-2159698bb251",
      "query": "WITH RoutePerformance AS (SELECT origin AS Origin, dest AS Dest, COUNT(*) AS FlightFrequency, AVG(CASE WHEN depdel15 = 0 THEN 1.0 ELSE 0.0 END) AS OnTimeDepartureRate, AVG(CASE WHEN arrdel15 = 0 THEN 1.0 ELSE 0.0 END) AS OnTimeArrivalRate FROM flights.optimized.flights WHERE cancelled = false AND diverted = false GROUP BY origin, dest HAVING COUNT(*) > 100) SELECT CORR(FlightFrequency, OnTimeDepartureRate) AS Frequency_DepartureCorrelation, CORR(FlightFrequency, OnTimeArrivalRate) AS Frequency_ArrivalCorrelation, COUNT(*) AS TotalRoutesAnalyzed, MIN(FlightFrequency) AS MinRouteFrequency, MAX(FlightFrequency) AS MaxRouteFrequency, AVG(FlightFrequency) AS AvgRouteFrequency FROM RoutePerformance;"
    },
    {
      "queryid": "6eb3dac9-e27a-462c-ac95-a33eff0c2695",
      "query": "SELECT distancegroup AS DistanceGroup, COUNT(*) AS TotalFlights, ROUND(AVG(distance), 2) AS AvgDistanceMiles, ROUND(AVG(airtime), 2) AS AvgAirTimeMinutes, ROUND(AVG(airtime / NULLIF(distance, 0)), 4) AS AvgMinutesPerMile, ROUND(AVG(crselapsedtime / NULLIF(distance, 0)), 4) AS AvgScheduledMinutesPerMile, ROUND((AVG(airtime / NULLIF(distance, 0)) - MIN(CASE WHEN distancegroup = 1 THEN airtime / NULLIF(distance, 0) END)) * 100.0 / MIN(CASE WHEN distancegroup = 1 THEN airtime / NULLIF(distance, 0) END), 2) AS EfficiencyDeviationFromShortest, ROUND(AVG(crselapsedtime - airtime), 2) AS AvgBufferTime, ROUND(SUM(CASE WHEN airtime > crselapsedtime THEN 1 ELSE 0 END) * 100.0 / COUNT(*), 2) AS PercentFlightsExceedingScheduledAirTime FROM flights.optimized.flights WHERE NOT cancelled AND NOT diverted AND distance > 0 AND airtime IS NOT NULL AND crselapsedtime IS NOT NULL GROUP BY distancegroup ORDER BY distancegroup;"
    },
    {
      "queryid": "2f4177b6-e7e6-4cf8-88a6-1bac1589c374",
      "query": "SELECT distancegroup AS DistanceGroup, COUNT(*) AS TotalFlights, SUM(CASE WHEN cancelled THEN 1 ELSE 0 END) AS CancelledFlights, ROUND(SUM(CASE WHEN cancelled THEN 1 ELSE 0 END) * 100.0 / COUNT(*), 2) AS CancellationRatePercent, ROUND(AVG(distance), 2) AS AvgDistanceMiles, ROUND(AVG(month), 2) AS AvgMonth, ROUND(AVG(dayofweek), 2) AS AvgDayOfWeek FROM flights.optimized.flights GROUP BY distancegroup HAVING COUNT(*) > 100 ORDER BY CancellationRatePercent DESC;"
    },
    {
      "queryid": "ebfe26f2-8f45-4038-9eb2-148696d26292",
      "query": "WITH AirlineHubFlights AS (SELECT operating_airline, origin AS hubairport, COUNT(*) AS flightcount, RANK() OVER (PARTITION BY operating_airline ORDER BY COUNT(*) DESC) AS hubrank FROM flights.optimized.flights WHERE NOT cancelled AND NOT diverted GROUP BY operating_airline, origin HAVING COUNT(*) > 100), PrimaryHubs AS (SELECT operating_airline, hubairport FROM AirlineHubFlights WHERE hubrank = 1), AirlineTaxiEfficiency AS (SELECT f.operating_airline, h.hubairport, COUNT(*) AS totalflights, ROUND(AVG(f.taxiout), 2) AS avgtaxiout, ROUND(STDDEV(f.taxiout), 2) AS taxioutstddev, ROUND(AVG(CASE WHEN f.depdel15 = 0 THEN f.taxiout END), 2) AS avgtaxioutontime, ROUND(AVG(CASE WHEN f.depdel15 = 1 THEN f.taxiout END), 2) AS avgtaxioutdelayed, ROUND(SUM(CASE WHEN f.depdel15 = 0 THEN 1 ELSE 0 END) * 100.0 / COUNT(*), 2) AS ontimedeparturerate FROM flights.optimized.flights f JOIN PrimaryHubs h ON f.operating_airline = h.operating_airline AND f.origin = h.hubairport WHERE NOT f.cancelled AND NOT f.diverted AND f.taxiout IS NOT NULL AND f.taxiout > 0 GROUP BY f.operating_airline, h.hubairport HAVING COUNT(*) > 500) SELECT operating_airline, hubairport, totalflights, avgtaxiout, taxioutstddev, avgtaxioutontime, avgtaxioutdelayed, ontimedeparturerate, RANK() OVER (ORDER BY avgtaxiout ASC) AS taxiefficiencyrank FROM AirlineTaxiEfficiency ORDER BY taxiefficiencyrank;"
    },
    {
      "queryid": "9f984b51-91b7-4101-8cdd-77564460c3ea",
      "query": "SELECT operating_airline, CASE WHEN operated_or_branded_code_share_partners IS NOT NULL AND operated_or_branded_code_share_partners != '' AND operated_or_branded_code_share_partners != 'NA' THEN 'Code-Share Operation' ELSE 'Regular Operation' END AS OperationType, COUNT(*) AS TotalFlights, ROUND(AVG(CASE WHEN depdel15 = 1 THEN 1 ELSE 0 END) * 100, 2) AS DepartureDelayRate, ROUND(AVG(CASE WHEN arrdel15 = 1 THEN 1 ELSE 0 END) * 100, 2) AS ArrivalDelayRate, ROUND(AVG(depdelayminutes), 2) AS AvgDepartureDelayMinutes, ROUND(AVG(arrdelayminutes), 2) AS AvgArrivalDelayMinutes, ROUND(AVG(CASE WHEN depdel15 = 0 THEN 1 ELSE 0 END) * 100, 2) AS OnTimeDepartureRate, ROUND(AVG(CASE WHEN arrdel15 = 0 THEN 1 ELSE 0 END) * 100, 2) AS OnTimeArrivalRate FROM flights.optimized.flights WHERE NOT cancelled AND NOT diverted AND depdel15 IS NOT NULL AND arrdel15 IS NOT NULL GROUP BY operating_airline, 2 HAVING COUNT(*) > 100 ORDER BY operating_airline, OperationType;"
    },
    {
      "queryid": "d50a8dfe-6f77-43cc-ad6a-f3e8a18aa1e0",
      "query": "WITH categorized AS (SELECT operating_airline, tail_number, CASE WHEN REGEXP_LIKE(tail_number, '^N[0-9][A-Z]{4}$') THEN 'N + 1 digit + 4 letters' WHEN REGEXP_LIKE(tail_number, '^N[0-9]{2}[A-Z]{3}$') THEN 'N + 2 digits + 3 letters' WHEN REGEXP_LIKE(tail_number, '^N[0-9][A-Z]{3}$') THEN 'N + 1 digit + 3 letters' WHEN REGEXP_LIKE(tail_number, '^N[0-9]{3}[A-Z]{2}$') THEN 'N + 3 digits + 2 letters' WHEN REGEXP_LIKE(tail_number, '^N[0-9]{2}[A-Z]{2}$') THEN 'N + 2 digits + 2 letters' WHEN REGEXP_LIKE(tail_number, '^N[0-9]{4}[A-Z]$') THEN 'N + 4 digits + 1 letter' WHEN REGEXP_LIKE(tail_number, '^N[0-9]{3}[A-Z]$') THEN 'N + 3 digits + 1 letter' WHEN REGEXP_LIKE(tail_number, '^N[0-9]{5}$') THEN 'N + 5 digits' WHEN REGEXP_LIKE(tail_number, '^N[0-9]{4}$') THEN 'N + 4 digits' WHEN REGEXP_LIKE(tail_number, '^N[0-9]{3}$') THEN 'N + 3 digits' WHEN REGEXP_LIKE(tail_number, '^N[0-9]{2}$') THEN 'N + 2 digits' WHEN REGEXP_LIKE(tail_number, '^N[0-9]$') THEN 'N + 1 digit' ELSE 'Other' END AS aircrafttypecategory, depdel15 FROM flights.optimized.flights WHERE tail_number IS NOT NULL AND operating_airline IS NOT NULL AND depdel15 IS NOT NULL AND (cancelled = false OR cancelled IS NULL) AND (diverted = false OR diverted IS NULL)) SELECT operating_airline, aircrafttypecategory, COUNT(*) AS totalflights, SUM(CASE WHEN depdel15 = 1 THEN 1 ELSE 0 END) AS delayedflights, ROUND(CAST(SUM(CASE WHEN depdel15 = 1 THEN 1 ELSE 0 END) AS DOUBLE) * 100.0 / COUNT(*), 2) AS delaypercentage FROM categorized GROUP BY operating_airline, aircrafttypecategory HAVING COUNT(*) > 50 ORDER BY operating_airline, delaypercentage DESC;"
    },
    {
      "queryid": "3e6e6491-e2ec-4741-9007-ba9580615736",
      "query": "SELECT operating_airline AS Operating_Airline, COUNT(*) AS TotalFlights, SUM(CASE WHEN depdel15 = 1 THEN 1 ELSE 0 END) AS TotalDelayedDepartures, SUM(CASE WHEN depdel15 = 1 AND arrdel15 = 0 THEN 1 ELSE 0 END) AS RecoveredFlights, SUM(CASE WHEN depdel15 = 1 AND arrdel15 = 1 THEN 1 ELSE 0 END) AS UnrecoveredFlights, ROUND(SUM(CASE WHEN depdel15 = 1 AND arrdel15 = 0 THEN 1 ELSE 0 END) * 100.0 / NULLIF(SUM(CASE WHEN depdel15 = 1 THEN 1 ELSE 0 END), 0), 2) AS RecoveryRatePercent, ROUND(AVG(CASE WHEN depdel15 = 1 THEN depdelayminutes END), 2) AS AvgDepartureDelayForDelayedFlights, ROUND(AVG(CASE WHEN depdel15 = 1 AND arrdel15 = 0 THEN depdelayminutes END), 2) AS AvgDepartureDelayForRecoveredFlights, ROUND(AVG(CASE WHEN depdel15 = 1 AND arrdel15 = 1 THEN (arrdelayminutes - depdelayminutes) END), 2) AS AvgDelayIncreaseDuringFlight FROM flights.optimized.flights WHERE cancelled = false AND diverted = false AND depdel15 IS NOT NULL AND arrdel15 IS NOT NULL GROUP BY operating_airline HAVING SUM(CASE WHEN depdel15 = 1 THEN 1 ELSE 0 END) > 100 ORDER BY RecoveryRatePercent DESC;"
    },
    {
      "queryid": "b5c9bdcd-17ac-44bb-a246-756b9fad907a",
      "query": "SELECT flightdate AS FlightDate, distancegroup AS DistanceGroup, COUNT(*) AS TotalFlights, SUM(CASE WHEN depdel15 = 1 THEN 1 ELSE 0 END) AS DelayedFlights, SUM(CASE WHEN depdel15 = 1 AND distancegroup <= 2 THEN 1 ELSE 0 END) * 120 AS EstimatedPassengersShortHaul, SUM(CASE WHEN depdel15 = 1 AND distancegroup BETWEEN 3 AND 4 THEN 1 ELSE 0 END) * 150 AS EstimatedPassengersMediumHaul, SUM(CASE WHEN depdel15 = 1 AND distancegroup >= 5 THEN 1 ELSE 0 END) * 180 AS EstimatedPassengersLongHaul, (SUM(CASE WHEN depdel15 = 1 AND distancegroup <= 2 THEN 1 ELSE 0 END) * 120 + SUM(CASE WHEN depdel15 = 1 AND distancegroup BETWEEN 3 AND 4 THEN 1 ELSE 0 END) * 150 + SUM(CASE WHEN depdel15 = 1 AND distancegroup >= 5 THEN 1 ELSE 0 END) * 180) AS TotalEstimatedAffectedPassengers, ROUND(SUM(CASE WHEN depdel15 = 1 THEN 1 ELSE 0 END) * 100.0 / COUNT(*), 2) AS DelayRatePercentage FROM flights.optimized.flights WHERE cancelled = false AND diverted = false GROUP BY flightdate, distancegroup ORDER BY flightdate DESC, TotalEstimatedAffectedPassengers DESC;"
    },
    {
      "queryid": "d576f288-9d34-4f78-a185-49501d43e01d",
      "query": "SELECT deptimeblk AS DepartureTimeBlock, COUNT(*) AS TotalFlights, SUM(CASE WHEN depdel15 = 1 THEN 1 ELSE 0 END) AS DelayedDepartures, ROUND(AVG(CASE WHEN depdel15 = 1 THEN depdelay END), 2) AS AvgDepartureDelay, ROUND(AVG(CASE WHEN depdel15 = 1 THEN arrdelay END), 2) AS AvgArrivalDelay, ROUND(AVG(CASE WHEN depdel15 = 1 THEN depdelay - arrdelay END), 2) AS AvgDelayRecoveryMinutes, ROUND(SUM(CASE WHEN depdel15 = 1 AND arrdelay < depdelay THEN 1 ELSE 0 END) * 100.0 / NULLIF(SUM(CASE WHEN depdel15 = 1 THEN 1 ELSE 0 END), 0), 2) AS PercentFlightsRecoveredTime, ROUND(AVG(CASE WHEN depdel15 = 1 AND arrdelay < depdelay THEN depdelay - arrdelay END), 2) AS AvgMinutesRecovered, ROUND(AVG(CASE WHEN depdel15 = 1 AND arrdelay >= depdelay THEN depdelay - arrdelay END), 2) AS AvgDelayGrowth FROM flights.optimized.flights WHERE NOT cancelled AND NOT diverted AND depdelay IS NOT NULL AND arrdelay IS NOT NULL AND deptimeblk IS NOT NULL GROUP BY deptimeblk ORDER BY SUBSTRING(deptimeblk, 1, 2) ASC;"
    },
    {
      "queryid": "4ab2b57f-2806-4eba-9ded-48630300e5b4",
      "query": "WITH FlightPeriods AS (SELECT operating_airline, month, dayofmonth, cancelled, CASE WHEN month = 11 AND dayofmonth BETWEEN 20 AND 30 THEN 'Thanksgiving' WHEN (month = 12 AND dayofmonth >= 20) OR (month = 1 AND dayofmonth <= 5) THEN 'Christmas_New_Year' ELSE 'Regular' END AS periodtype FROM flights.optimized.flights), CancellationRates AS (SELECT operating_airline, periodtype, COUNT(*) AS totalflights, SUM(CASE WHEN cancelled = true THEN 1 ELSE 0 END) AS cancelledflights, ROUND(SUM(CASE WHEN cancelled = true THEN 1 ELSE 0 END) * 100.0 / COUNT(*), 2) AS cancellationrate FROM FlightPeriods GROUP BY operating_airline, periodtype HAVING COUNT(*) > 100), RegularRates AS (SELECT operating_airline, cancellationrate AS regularcancellationrate FROM CancellationRates WHERE periodtype = 'Regular') SELECT cr.operating_airline, cr.periodtype, cr.cancellationrate AS holidaycancellationrate, rr.regularcancellationrate, cr.cancellationrate - rr.regularcancellationrate AS ratedifference, ROUND((cr.cancellationrate - rr.regularcancellationrate) * 100.0 / NULLIF(rr.regularcancellationrate, 0), 2) AS percentincrease FROM CancellationRates cr JOIN RegularRates rr ON cr.operating_airline = rr.operating_airline WHERE cr.periodtype IN ('Thanksgiving', 'Christmas_New_Year') ORDER BY cr.periodtype, ratedifference DESC;"
    },
    {
      "queryid": "e4b0a2ef-1155-46fd-8b66-c364ae03783f",
      "query": "WITH MonthlyData AS (SELECT year AS Year, month AS Month, COUNT(*) AS AirTrafficVolume, AVG(depdelayminutes) AS AvgDepartureDelay FROM flights.optimized.flights WHERE (cancelled IS NULL OR cancelled = false) AND ((year = 2019 AND month <= EXTRACT(MONTH FROM CURRENT_DATE)) OR (year = 2018 AND month > EXTRACT(MONTH FROM CURRENT_DATE))) GROUP BY year, month), CorrelationCalc AS (SELECT CASE WHEN (COUNT(*) * SUM(AirTrafficVolume * AirTrafficVolume) - SUM(AirTrafficVolume) * SUM(AirTrafficVolume)) * (COUNT(*) * SUM(AvgDepartureDelay * AvgDepartureDelay) - SUM(AvgDepartureDelay) * SUM(AvgDepartureDelay)) = 0 THEN NULL ELSE (COUNT(*) * SUM(AirTrafficVolume * AvgDepartureDelay) - SUM(AirTrafficVolume) * SUM(AvgDepartureDelay)) / SQRT((COUNT(*) * SUM(AirTrafficVolume * AirTrafficVolume) - SUM(AirTrafficVolume) * SUM(AirTrafficVolume)) * (COUNT(*) * SUM(AvgDepartureDelay * AvgDepartureDelay) - SUM(AvgDepartureDelay) * SUM(AvgDepartureDelay))) END AS Correlation FROM MonthlyData) SELECT md.Year, md.Month, md.AirTrafficVolume, md.AvgDepartureDelay, cc.Correlation AS DelayVolumeCorrelation FROM MonthlyData md CROSS JOIN CorrelationCalc cc ORDER BY md.Year, md.Month;"
    },
    {
      "queryid": "19b36ab4-3822-407c-9f98-fcb38bf758ba",
      "query": "WITH RouteClassification AS (SELECT origin, dest, origincityname, destcityname, SUM(CASE WHEN dayofweek BETWEEN 1 AND 5 THEN 1 ELSE 0 END) AS WeekdayFlights, SUM(CASE WHEN dayofweek BETWEEN 6 AND 7 THEN 1 ELSE 0 END) AS WeekendFlights, SUM(CASE WHEN deptimeblk IN ('0500-0559', '0600-0659', '0700-0759', '0800-0859', '0900-0959') THEN 1 ELSE 0 END) AS MorningFlights, SUM(CASE WHEN deptimeblk IN ('1600-1659', '1700-1759', '1800-1859', '1900-1959') THEN 1 ELSE 0 END) AS EveningFlights, SUM(CASE WHEN deptimeblk IN ('1000-1059', '1100-1159', '1200-1259', '1300-1359', '1400-1459', '1500-1559') THEN 1 ELSE 0 END) AS MiddayFlights, SUM(CASE WHEN deptimeblk IN ('2000-2059', '2100-2159', '2200-2259', '2300-2359', '0001-0559','0000-0059', '0100-0159', '0200-0259', '0300-0359', '0400-0459') THEN 1 ELSE 0 END) AS MidnightFlights, SUM(CASE WHEN origin IN ('JFK', 'LAX', 'ORD', 'DFW', 'SFO', 'BOS', 'ATL', 'EWR', 'IAD', 'SEA') AND dest IN ('JFK', 'LAX', 'ORD', 'DFW', 'SFO', 'BOS', 'ATL', 'EWR', 'IAD', 'SEA') THEN 1 ELSE 0 END) AS BusinessHubFlights, SUM(CASE WHEN dest IN ('LAS', 'MCO', 'FLL', 'MIA', 'BWI', 'SAN', 'HNL', 'SLC', 'TPA') THEN 1 ELSE 0 END) AS LeisureDestinationFlights FROM flights.optimized.flights GROUP BY origin, dest, origincityname, destcityname HAVING COUNT(*) > 100), BusinessLeisureRoutes AS (SELECT origin, dest, origincityname, destcityname, CASE WHEN (WeekdayFlights * 1.0 / NULLIF(WeekendFlights, 0) > 1.5 AND (MorningFlights + EveningFlights) * 1.0 / NULLIF((MorningFlights + EveningFlights + MiddayFlights + MidnightFlights),0) > 0.5 AND BusinessHubFlights > 0) THEN 'Business-Heavy' WHEN (WeekendFlights * 1.0 / NULLIF(WeekdayFlights, 0) > 0.7 AND MiddayFlights * 1.0 / NULLIF((MorningFlights + EveningFlights + MiddayFlights + MidnightFlights),0) > 0.4 AND LeisureDestinationFlights > 0) THEN 'Leisure' ELSE 'Mixed' END AS RouteType FROM RouteClassification), DelayPatterns AS (SELECT blr.RouteType, CASE WHEN f.dayofweek BETWEEN 1 AND 5 THEN 'Weekday' ELSE 'Weekend' END AS DayType, COUNT(*) AS TotalFlights, SUM(CASE WHEN f.depdel15 = 1 THEN 1 ELSE 0 END) AS DelayedFlights, ROUND(SUM(CASE WHEN f.depdel15 = 1 THEN 1 ELSE 0 END) * 100.0 / COUNT(*), 2) AS DelayRatePercent, ROUND(AVG(f.depdelayminutes), 2) AS AvgDelayMinutes, ROUND(AVG(f.taxiout), 2) AS AvgTaxiOut FROM flights.optimized.flights f JOIN BusinessLeisureRoutes blr ON f.origin = blr.origin AND f.dest = blr.dest WHERE f.cancelled = false AND f.diverted = false GROUP BY blr.RouteType, CASE WHEN f.dayofweek BETWEEN 1 AND 5 THEN 'Weekday' ELSE 'Weekend' END) SELECT RouteType, DayType, TotalFlights, DelayedFlights, DelayRatePercent, AvgDelayMinutes, AvgTaxiOut, ROUND(DelayRatePercent - (SELECT AVG(DelayRatePercent) FROM DelayPatterns), 2) AS DelayRateVsOverallAvg FROM DelayPatterns ORDER BY RouteType, DayType"
    }
  ]
}