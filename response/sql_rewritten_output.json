{
  "queries": [
    {
      "queryid": "10ba3c04-0f91-4ef3-a717-c1e0d33b31bc",
      "query": "WITH MonthlyFlightCounts AS (\n    SELECT \n        origin AS Origin, \n        month AS Month, \n        COUNT(*) AS TotalFlights\n    FROM flights.optimized.flights_olap\n    WHERE cancelled = false AND diverted = false\n    GROUP BY origin, month\n),\nTopAirportsByMonth AS (\n    SELECT \n        Month, \n        Origin, \n        TotalFlights, \n        RANK() OVER (PARTITION BY Month ORDER BY TotalFlights DESC) AS AirportRank\n    FROM MonthlyFlightCounts\n),\nFilteredFlights AS (\n    SELECT \n        f.*, \n        CASE WHEN f.deptimeblk IN ('0600-0659', '0700-0759', '0800-0859', '1600-1659', '1700-1759', '1800-1859') THEN 'Peak' ELSE 'Off-Peak' END AS TimeOfDay,\n        f.month AS Month\n    FROM flights.optimized.flights_olap f\n    JOIN TopAirportsByMonth t ON f.origin = t.Origin AND f.month = t.Month\n    WHERE f.cancelled = false AND f.diverted = false AND t.AirportRank <= 10\n)\nSELECT \n    ff.Month, \n    ff.origin AS Origin, \n    ff.TimeOfDay, \n    COUNT(*) AS TotalFlights,\n    ROUND(AVG(ff.taxiout), 2) AS AvgTaxiOut,\n    ROUND(AVG(ff.depdelay), 2) AS AvgDEPDelay,\n    ROUND(AVG(ff.arrdelay), 2) AS AvgARRDelay,\n    ROUND(CORR(ff.taxiout, ff.depdelay), 2) AS TaxiOut_DepDelay_Correlation,\n    ROUND(CORR(ff.taxiout, ff.arrdelay), 2) AS TaxiOut_ArrDelay_Correlation,\n    SUM(CASE WHEN ff.depdel15 = 1 THEN 1 ELSE 0 END) AS DelayedFlights,\n    ROUND((SUM(CASE WHEN ff.depdel15 = 1 THEN 1 ELSE 0 END) * 100.0 / COUNT(*)), 2) AS PercentDelayed\nFROM FilteredFlights ff\nGROUP BY ff.Month, ff.origin, ff.TimeOfDay\nORDER BY ff.Month DESC, ff.origin, ff.TimeOfDay;"
    },
    {
      "queryid": "8abd47c0-31cb-4ba0-891f-9bac53bbc909",
      "query": "WITH AirportDiscrepancy AS (\n    SELECT \n        origin AS Airport,\n        origincityname AS AirportCity,\n        originstate AS AirportState,\n        'Origin' AS AirportRole,\n        COUNT(*) AS TotalFlights,\n        AVG(actualelapsedtime - crselapsedtime) AS AvgDiscrepancy,\n        AVG(depdelay) AS AvgDepDelay,\n        AVG(depdelayminutes) AS AvgDepDelayMinutes,\n        AVG(taxiout) AS AvgTaxiOut,\n        AVG(CASE WHEN depdel15 = 1 THEN 1 ELSE 0 END) AS PercentDelayedDepartures,\n        AVG(CASE WHEN diverted THEN 1 ELSE 0 END) AS PercentDiverted,\n        AVG(CASE WHEN cancelled THEN 1 ELSE 0 END) AS PercentCancelled\n    FROM flights.optimized.flights_olap\n    WHERE crselapsedtime IS NOT NULL\n      AND actualelapsedtime IS NOT NULL\n      AND crselapsedtime > 0\n      AND cancelled = false\n    GROUP BY origin, origincityname, originstate\n\n    UNION ALL\n\n    SELECT \n        dest AS Airport,\n        destcityname AS AirportCity,\n        deststate AS AirportState,\n        'Destination' AS AirportRole,\n        COUNT(*) AS TotalFlights,\n        AVG(actualelapsedtime - crselapsedtime) AS AvgDiscrepancy,\n        AVG(arrdelay) AS AvgDepDelay,\n        AVG(arrdelayminutes) AS AvgDepDelayMinutes,\n        AVG(taxiin) AS AvgTaxiOut,\n        AVG(CASE WHEN arrdel15 = 1 THEN 1 ELSE 0 END) AS PercentDelayedDepartures,\n        AVG(CASE WHEN diverted THEN 1 ELSE 0 END) AS PercentDiverted,\n        AVG(CASE WHEN cancelled THEN 1 ELSE 0 END) AS PercentCancelled\n    FROM flights.optimized.flights_olap\n    WHERE crselapsedtime IS NOT NULL\n      AND actualelapsedtime IS NOT NULL\n      AND crselapsedtime > 0\n      AND cancelled = false\n    GROUP BY dest, destcityname, deststate\n),\nRankedAirports AS (\n    SELECT *,\n           RANK() OVER (ORDER BY AvgDiscrepancy DESC) AS DiscrepancyRank\n    FROM AirportDiscrepancy\n    WHERE TotalFlights > 1000\n)\nSELECT \n    Airport,\n    AirportCity,\n    AirportState,\n    AirportRole,\n    TotalFlights,\n    ROUND(AvgDiscrepancy, 2) AS AvgDiscrepancyMinutes,\n    ROUND(AvgDepDelay, 2) AS AvgDelayMinutes,\n    ROUND(AvgDepDelayMinutes, 2) AS AvgDelayMinutesNonNegative,\n    ROUND(AvgTaxiOut, 2) AS AvgTaxiTimeMinutes,\n    ROUND(PercentDelayedDepartures * 100, 2) AS PercentDelayedFlights,\n    ROUND(PercentDiverted * 100, 2) AS PercentDivertedFlights,\n    ROUND(PercentCancelled * 100, 2) AS PercentCancelledFlights,\n    DiscrepancyRank\nFROM RankedAirports\nWHERE DiscrepancyRank <= 20\nORDER BY DiscrepancyRank;"
    },
    {
      "queryid": "38a70da3-f3f2-48e9-896d-4f9303598967",
      "query": "SELECT\n  operating_airline AS Airline,\n  dayofweek AS DayOfWeek,\n  COUNT(*) AS TotalFlights,\n  ROUND(AVG(depdelayminutes), 2) AS AvgDepartureDelayMinutes,\n  SUM(CASE WHEN depdel15 = 0 THEN 1 ELSE 0 END) AS OnTimeFlights,\n  ROUND((SUM(CASE WHEN depdel15 = 0 THEN 1 ELSE 0 END) * 100.0 / COUNT(*)), 2) AS OnTimePerformancePercent\nFROM flights.optimized.flights_olap\nWHERE cancelled = false\n  AND diverted = false\n  AND depdelayminutes IS NOT NULL\nGROUP BY operating_airline, dayofweek\nORDER BY OnTimePerformancePercent DESC, AvgDepartureDelayMinutes ASC;"
    },
    {
      "queryid": "eee49065-116e-456a-83d9-0e0ef8083086",
      "query": "WITH MajorAirports AS (\n    SELECT \n        origin AS airport, \n        origincityname AS airportcity, \n        COUNT(*) AS totalflights\n    FROM flights.optimized.flights_olap\n    GROUP BY origin, origincityname\n    ORDER BY totalflights DESC\n    LIMIT 10\n),\nPeakHoursFlights AS (\n    SELECT \n        f.origin AS airport, \n        m.airportcity, \n        f.deptimeblk, \n        f.taxiout, \n        f.depdelayminutes, \n        f.depdel15\n    FROM flights.optimized.flights_olap f\n    JOIN MajorAirports m ON f.origin = m.airport\n    WHERE f.cancelled = false\n      AND f.diverted = false\n      AND f.taxiout IS NOT NULL\n      AND f.depdelayminutes IS NOT NULL\n      AND f.deptimeblk IN ('0600-0659', '0700-0759', '0800-0859', '1600-1659', '1700-1759', '1800-1859')\n)\nSELECT \n    airport, \n    airportcity, \n    deptimeblk, \n    COUNT(*) AS totalflights,\n    ROUND(AVG(taxiout), 2) AS avgtaxioutminutes,\n    ROUND(AVG(depdelayminutes), 2) AS avgdeparturedelayminutes,\n    ROUND(CORR(taxiout, depdelayminutes), 3) AS taxiout_depdelay_correlation,\n    SUM(CASE WHEN depdel15 = 1 THEN 1 ELSE 0 END) AS delayedflights,\n    ROUND((SUM(CASE WHEN depdel15 = 1 THEN 1 ELSE 0 END) * 100.0 / COUNT(*)), 2) AS percentdelayed15plus,\n    ROUND(AVG(CASE WHEN taxiout <= 10 THEN depdelayminutes END), 2) AS avgdelay_taxiout_0_10,\n    ROUND(AVG(CASE WHEN taxiout > 10 AND taxiout <= 20 THEN depdelayminutes END), 2) AS avgdelay_taxiout_11_20,\n    ROUND(AVG(CASE WHEN taxiout > 20 THEN depdelayminutes END), 2) AS avgdelay_taxiout_20plus\nFROM PeakHoursFlights\nGROUP BY airport, airportcity, deptimeblk\nORDER BY airport, deptimeblk;"
    },
    {
      "queryid": "d7e84363-86f7-47a2-851f-41a793fea732",
      "query": "SELECT \n  origin AS Airport, \n  origincityname AS AirportCity, \n  originstate AS AirportState, \n  COUNT(*) AS TotalFlights, \n  SUM(CASE WHEN depdel15 = 1 THEN 1 ELSE 0 END) AS DelayedFlights, \n  ROUND((SUM(CASE WHEN depdel15 = 1 THEN 1 ELSE 0 END) * 100.0 / COUNT(*)), 2) AS PercentDelayedFlights, \n  ROUND(AVG(depdelay), 2) AS AvgDepartureDelayMinutes, \n  ROUND(AVG(taxiout), 2) AS AvgTaxiOutMinutes \nFROM flights.optimized.flights_olap \nWHERE cancelled = false \n  AND diverted = false \n  AND depdel15 IS NOT NULL \n  AND depdelay IS NOT NULL \n  AND taxiout IS NOT NULL \nGROUP BY origin, origincityname, originstate \nHAVING COUNT(*) > 1000 \nORDER BY PercentDelayedFlights DESC, AvgDepartureDelayMinutes DESC \nLIMIT 20;"
    },
    {
      "queryid": "20eca341-19e1-4d85-a75d-07d9253ff06d",
      "query": "SELECT\n  distancegroup AS DistanceGroup,\n  COUNT(*) AS TotalFlights,\n  ROUND(CORR(depdelayminutes, arrdelayminutes), 3) AS DelayCorrelation,\n  ROUND(AVG(depdelayminutes), 2) AS AvgDepartureDelayMinutes,\n  ROUND(AVG(arrdelayminutes), 2) AS AvgArrivalDelayMinutes,\n  ROUND(SUM(CASE WHEN depdel15 = 1 THEN 1 ELSE 0 END) * 100.0 / COUNT(*), 2) AS PercentDelayedDepartures,\n  ROUND(SUM(CASE WHEN arrdel15 = 1 THEN 1 ELSE 0 END) * 100.0 / COUNT(*), 2) AS PercentDelayedArrivals\nFROM flights.optimized.flights_olap\nWHERE\n  cancelled = false\n  AND diverted = false\n  AND depdelayminutes IS NOT NULL\n  AND arrdelayminutes IS NOT NULL\n  AND distancegroup IS NOT NULL\nGROUP BY distancegroup\nORDER BY distancegroup;"
    },
    {
      "queryid": "aaf7984c-796c-4df7-b29f-e63362d1823d",
      "query": "SELECT\n  CASE\n    WHEN distance < 500 THEN 'Short-Haul (<500 miles)'\n    WHEN distance > 1500 THEN 'Long-Haul (>1500 miles)'\n  END AS FlightCategory,\n  departuredelaygroups AS DepartureDelayGroups,\n  COUNT(*) AS FlightCount,\n  ROUND(COUNT(*) * 100.0 / SUM(COUNT(*)) OVER (\n    PARTITION BY CASE\n      WHEN distance < 500 THEN 'Short-Haul (<500 miles)'\n      WHEN distance > 1500 THEN 'Long-Haul (>1500 miles)'\n    END\n  ), 2) AS PercentageOfCategory,\n  ROUND(AVG(depdelayminutes), 2) AS AvgDelayMinutes,\n  ROUND(SUM(CASE WHEN depdel15 = 1 THEN 1 ELSE 0 END) * 100.0 / COUNT(*), 2) AS PercentDelayed15Plus\nFROM flights.optimized.flights_olap\nWHERE\n  cancelled = false\n  AND diverted = false\n  AND distance IS NOT NULL\n  AND departuredelaygroups IS NOT NULL\n  AND (distance < 500 OR distance > 1500)\nGROUP BY 1, departuredelaygroups\nORDER BY 1, departuredelaygroups;"
    },
    {
      "queryid": "c1de9515-3da5-4440-a6d9-537e2cc4f5c8",
      "query": "WITH DistanceGroupAverages AS (\n    SELECT\n        distancegroup AS DistanceGroup,\n        AVG(CASE WHEN arrdel15 = 1 THEN 1.0 ELSE 0.0 END) AS AvgDelayRate\n    FROM flights.optimized.flights_olap\n    WHERE cancelled = false\n      AND diverted = false\n      AND arrdel15 IS NOT NULL\n    GROUP BY distancegroup\n),\nAirportDelayRates AS (\n    SELECT\n        dest AS DestinationAirport,\n        destcityname AS DestinationCity,\n        deststate AS DestinationState,\n        arrtimeblk AS ArrivalTimeBlock,\n        distancegroup AS DistanceGroup,\n        COUNT(*) AS TotalFlights,\n        AVG(CASE WHEN arrdel15 = 1 THEN 1.0 ELSE 0.0 END) AS DelayRate\n    FROM flights.optimized.flights_olap\n    WHERE cancelled = false\n      AND diverted = false\n      AND arrdel15 IS NOT NULL\n    GROUP BY dest, destcityname, deststate, arrtimeblk, distancegroup\n    HAVING COUNT(*) > 50\n)\nSELECT\n    adr.DestinationAirport,\n    adr.DestinationCity,\n    adr.DestinationState,\n    adr.ArrivalTimeBlock,\n    adr.DistanceGroup,\n    adr.TotalFlights,\n    ROUND(adr.DelayRate * 100, 2) AS ArrivalDelayRatePercent,\n    ROUND(dga.AvgDelayRate * 100, 2) AS AvgDistanceGroupDelayRatePercent,\n    ROUND((adr.DelayRate - dga.AvgDelayRate) * 100, 2) AS DelayRateDifferenceFromAverage,\n    ROUND(AVG(f.arrdelayminutes) FILTER (WHERE f.arrdel15 = 1), 2) AS AvgDelayDurationMinutes\nFROM AirportDelayRates adr\nJOIN DistanceGroupAverages dga\n  ON adr.DistanceGroup = dga.DistanceGroup\nLEFT JOIN flights.optimized.flights_olap f\n  ON adr.DestinationAirport = f.dest\n     AND adr.ArrivalTimeBlock = f.arrtimeblk\n     AND adr.DistanceGroup = f.distancegroup\n     AND f.cancelled = false\n     AND f.diverted = false\n     AND f.arrdel15 IS NOT NULL\nGROUP BY\n    adr.DestinationAirport,\n    adr.DestinationCity,\n    adr.DestinationState,\n    adr.ArrivalTimeBlock,\n    adr.DistanceGroup,\n    adr.TotalFlights,\n    adr.DelayRate,\n    dga.AvgDelayRate\nORDER BY\n    adr.DestinationAirport,\n    adr.DistanceGroup,\n    adr.ArrivalTimeBlock;"
    },
    {
      "queryid": "a7972ec2-5b53-4411-b5e7-cb4f9f14f25b",
      "query": "WITH DistanceGroupAverages AS (\n    SELECT \n        distancegroup AS DistanceGroup, \n        AVG(CASE WHEN arrdelayminutes >= 15 THEN 1 ELSE 0 END) AS AvgDelayRate\n    FROM flights.optimized.flights_olap\n    WHERE cancelled = false \n      AND diverted = false \n      AND arrdelayminutes IS NOT NULL\n    GROUP BY distancegroup\n),\nAirportDelayRates AS (\n    SELECT \n        dest AS DestinationAirport, \n        destcityname AS DestCityName, \n        deststate AS DestState, \n        arrtimeblk AS ArrTimeBlk, \n        distancegroup AS DistanceGroup, \n        COUNT(*) AS TotalFlights, \n        AVG(CASE WHEN arrdelayminutes >= 15 THEN 1 ELSE 0 END) AS DelayRate,\n        AVG(arrdelayminutes) AS AvgArrDelayMinutes\n    FROM flights.optimized.flights_olap\n    WHERE cancelled = false \n      AND diverted = false \n      AND arrdelayminutes IS NOT NULL\n    GROUP BY dest, destcityname, deststate, arrtimeblk, distancegroup\n    HAVING COUNT(*) > 50\n)\nSELECT \n    adr.DestinationAirport, \n    adr.DestCityName AS DestinationCity, \n    adr.DestState AS DestinationState, \n    adr.ArrTimeBlk, \n    adr.DistanceGroup, \n    adr.TotalFlights, \n    ROUND(adr.DelayRate * 100, 2) AS ArrivalDelayRatePercent, \n    ROUND(dga.AvgDelayRate * 100, 2) AS AvgDistanceGroupDelayRatePercent, \n    ROUND((adr.DelayRate - dga.AvgDelayRate) * 100, 2) AS DelayRateDifferenceFromAverage, \n    ROUND(AVG(CASE WHEN adr.AvgArrDelayMinutes >= 15 THEN adr.AvgArrDelayMinutes END), 2) AS AvgDelayDurationMinutes\nFROM AirportDelayRates adr\nJOIN DistanceGroupAverages dga ON adr.DistanceGroup = dga.DistanceGroup\nGROUP BY \n    adr.DestinationAirport, \n    adr.DestCityName, \n    adr.DestState, \n    adr.ArrTimeBlk, \n    adr.DistanceGroup, \n    adr.TotalFlights, \n    adr.DelayRate, \n    dga.AvgDelayRate\nORDER BY adr.DestinationAirport, adr.DistanceGroup, adr.ArrTimeBlk;"
    },
    {
      "queryid": "207ef12b-a027-4624-9ac5-0231bfeda82b",
      "query": "SELECT \n  origincityname || ' → ' || destcityname AS CityPair,\n  origincityname AS OriginCityName,\n  destcityname AS DestCityName,\n  COUNT(*) AS TotalFlights,\n  SUM(CASE WHEN cancelled = true THEN 1 ELSE 0 END) AS CancelledFlights,\n  ROUND(SUM(CASE WHEN cancelled = true THEN 1 ELSE 0 END) * 100.0 / COUNT(*), 2) AS CancellationRate,\n  SUM(CASE WHEN month IN (12, 1, 2) THEN 1 ELSE 0 END) AS WinterFlights,\n  SUM(CASE WHEN month IN (12, 1, 2) AND cancelled = true THEN 1 ELSE 0 END) AS WinterCancelled,\n  ROUND(\n    SUM(CASE WHEN month IN (12, 1, 2) AND cancelled = true THEN 1 ELSE 0 END) * 100.0 /\n    NULLIF(SUM(CASE WHEN month IN (12, 1, 2) THEN 1 ELSE 0 END), 0), 2\n  ) AS WinterCancellationRate,\n  SUM(CASE WHEN month IN (3, 4, 5) THEN 1 ELSE 0 END) AS SpringFlights,\n  SUM(CASE WHEN month IN (3, 4, 5) AND cancelled = true THEN 1 ELSE 0 END) AS SpringCancelled,\n  ROUND(\n    SUM(CASE WHEN month IN (3, 4, 5) AND cancelled = true THEN 1 ELSE 0 END) * 100.0 /\n    NULLIF(SUM(CASE WHEN month IN (3, 4, 5) THEN 1 ELSE 0 END), 0), 2\n  ) AS SpringCancellationRate,\n  SUM(CASE WHEN month IN (6, 7, 8) THEN 1 ELSE 0 END) AS SummerFlights,\n  SUM(CASE WHEN month IN (6, 7, 8) AND cancelled = true THEN 1 ELSE 0 END) AS SummerCancelled,\n  ROUND(\n    SUM(CASE WHEN month IN (6, 7, 8) AND cancelled = true THEN 1 ELSE 0 END) * 100.0 /\n    NULLIF(SUM(CASE WHEN month IN (6, 7, 8) THEN 1 ELSE 0 END), 0), 2\n  ) AS SummerCancellationRate,\n  SUM(CASE WHEN month IN (9, 10, 11) THEN 1 ELSE 0 END) AS FallFlights,\n  SUM(CASE WHEN month IN (9, 10, 11) AND cancelled = true THEN 1 ELSE 0 END) AS FallCancelled,\n  ROUND(\n    SUM(CASE WHEN month IN (9, 10, 11) AND cancelled = true THEN 1 ELSE 0 END) * 100.0 /\n    NULLIF(SUM(CASE WHEN month IN (9, 10, 11) THEN 1 ELSE 0 END), 0), 2\n  ) AS FallCancellationRate\nFROM flights.optimized.flights_olap\nGROUP BY origincityname, destcityname\nHAVING COUNT(*) > 100\nORDER BY CancellationRate DESC\nLIMIT 50;"
    },
    {
      "queryid": "1c76f499-bc7d-4151-b832-2159698bb251",
      "query": "WITH RoutePerformance AS (\n    SELECT \n        origin AS Origin, \n        dest AS Dest, \n        COUNT(*) AS FlightFrequency, \n        AVG(CASE WHEN depdel15 = 0 THEN 1.0 ELSE 0.0 END) AS OnTimeDepartureRate, \n        AVG(CASE WHEN arrdel15 = 0 THEN 1.0 ELSE 0.0 END) AS OnTimeArrivalRate\n    FROM flights.optimized.flights_olap\n    WHERE NOT cancelled AND NOT diverted\n    GROUP BY origin, dest\n    HAVING COUNT(*) > 100\n)\nSELECT \n    CORR(FlightFrequency, OnTimeDepartureRate) AS Frequency_DepartureCorrelation, \n    CORR(FlightFrequency, OnTimeArrivalRate) AS Frequency_ArrivalCorrelation, \n    COUNT(*) AS TotalRoutesAnalyzed, \n    MIN(FlightFrequency) AS MinRouteFrequency, \n    MAX(FlightFrequency) AS MaxRouteFrequency, \n    AVG(FlightFrequency) AS AvgRouteFrequency\nFROM RoutePerformance;"
    },
    {
      "queryid": "6eb3dac9-e27a-462c-ac95-a33eff0c2695",
      "query": "SELECT\n  distancegroup AS DistanceGroup,\n  COUNT(*) AS TotalFlights,\n  ROUND(AVG(distance), 2) AS AvgDistanceMiles,\n  ROUND(AVG(airtime), 2) AS AvgAirTimeMinutes,\n  ROUND(AVG(airtime / NULLIF(distance, 0)), 4) AS AvgMinutesPerMile,\n  ROUND(AVG(crselapsedtime / NULLIF(distance, 0)), 4) AS AvgScheduledMinutesPerMile,\n  ROUND((AVG(airtime / NULLIF(distance, 0)) - MIN(CASE WHEN distancegroup = 1 THEN airtime / NULLIF(distance, 0) END)) * 100.0 /\n        MIN(CASE WHEN distancegroup = 1 THEN airtime / NULLIF(distance, 0) END), 2) AS EfficiencyDeviationFromShortest,\n  ROUND(AVG(crselapsedtime - airtime), 2) AS AvgBufferTime,\n  ROUND(SUM(CASE WHEN airtime > crselapsedtime THEN 1 ELSE 0 END) * 100.0 / COUNT(*), 2) AS PercentFlightsExceedingScheduledAirTime\nFROM flights.optimized.flights_olap\nWHERE NOT cancelled\n  AND NOT diverted\n  AND distance > 0\n  AND airtime IS NOT NULL\n  AND crselapsedtime IS NOT NULL\nGROUP BY distancegroup\nORDER BY distancegroup;"
    },
    {
      "queryid": "2f4177b6-e7e6-4cf8-88a6-1bac1589c374",
      "query": "SELECT\n  distancegroup AS DistanceGroup,\n  COUNT(*) AS TotalFlights,\n  SUM(CASE WHEN cancelled THEN 1 ELSE 0 END) AS CancelledFlights,\n  ROUND(SUM(CASE WHEN cancelled THEN 1 ELSE 0 END) * 100.0 / COUNT(*), 2) AS CancellationRatePercent,\n  ROUND(AVG(distance), 2) AS AvgDistanceMiles,\n  ROUND(AVG(month), 2) AS AvgMonth,\n  ROUND(AVG(dayofweek), 2) AS AvgDayOfWeek\nFROM flights.optimized.flights_olap\nGROUP BY distancegroup\nHAVING COUNT(*) > 100\nORDER BY CancellationRatePercent DESC;"
    },
    {
      "queryid": "ebfe26f2-8f45-4038-9eb2-148696d26292",
      "query": "WITH AirlineHubFlights AS (\n    SELECT \n        operating_airline AS Operating_Airline, \n        origin AS HubAirport, \n        COUNT(*) AS FlightCount,\n        RANK() OVER (PARTITION BY operating_airline ORDER BY COUNT(*) DESC) AS HubRank\n    FROM flights.optimized.flights_olap\n    WHERE NOT cancelled AND NOT diverted\n    GROUP BY operating_airline, origin\n    HAVING COUNT(*) > 100\n),\nPrimaryHubs AS (\n    SELECT Operating_Airline, HubAirport\n    FROM AirlineHubFlights\n    WHERE HubRank = 1\n),\nAirlineTaxiEfficiency AS (\n    SELECT \n        f.operating_airline AS Operating_Airline,\n        h.HubAirport,\n        COUNT(*) AS TotalFlights,\n        ROUND(AVG(f.taxiout), 2) AS AvgTaxiOut,\n        ROUND(STDDEV(f.taxiout), 2) AS TaxiOutStdDev,\n        ROUND(AVG(CASE WHEN f.depdel15 = 0 THEN f.taxiout END), 2) AS AvgTaxiOutOnTime,\n        ROUND(AVG(CASE WHEN f.depdel15 = 1 THEN f.taxiout END), 2) AS AvgTaxiOutDelayed,\n        ROUND(SUM(CASE WHEN f.depdel15 = 0 THEN 1 ELSE 0 END) * 100.0 / COUNT(*), 2) AS OnTimeDepartureRate\n    FROM flights.optimized.flights_olap f\n    JOIN PrimaryHubs h ON f.operating_airline = h.Operating_Airline AND f.origin = h.HubAirport\n    WHERE NOT f.cancelled AND NOT f.diverted AND f.taxiout IS NOT NULL AND f.taxiout > 0\n    GROUP BY f.operating_airline, h.HubAirport\n    HAVING COUNT(*) > 500\n)\nSELECT \n    Operating_Airline, \n    HubAirport, \n    TotalFlights, \n    AvgTaxiOut, \n    TaxiOutStdDev, \n    AvgTaxiOutOnTime, \n    AvgTaxiOutDelayed, \n    OnTimeDepartureRate,\n    RANK() OVER (ORDER BY AvgTaxiOut ASC) AS TaxiEfficiencyRank\nFROM AirlineTaxiEfficiency\nORDER BY TaxiEfficiencyRank;"
    },
    {
      "queryid": "9f984b51-91b7-4101-8cdd-77564460c3ea",
      "query": "SELECT \n  operating_airline AS Operating_Airline,\n  CASE \n    WHEN operated_or_branded_code_share_partners IS NOT NULL \n         AND operated_or_branded_code_share_partners != '' \n         AND operated_or_branded_code_share_partners != 'NA' \n      THEN 'Code-Share Operation' \n    ELSE 'Regular Operation' \n  END AS OperationType,\n  COUNT(*) AS TotalFlights,\n  ROUND(AVG(CASE WHEN depdel15 = 1 THEN 1 ELSE 0 END) * 100, 2) AS DepartureDelayRate,\n  ROUND(AVG(CASE WHEN arrdel15 = 1 THEN 1 ELSE 0 END) * 100, 2) AS ArrivalDelayRate,\n  ROUND(AVG(depdelayminutes), 2) AS AvgDepartureDelayMinutes,\n  ROUND(AVG(arrdelayminutes), 2) AS AvgArrivalDelayMinutes,\n  ROUND(AVG(CASE WHEN depdel15 = 0 THEN 1 ELSE 0 END) * 100, 2) AS OnTimeDepartureRate,\n  ROUND(AVG(CASE WHEN arrdel15 = 0 THEN 1 ELSE 0 END) * 100, 2) AS OnTimeArrivalRate\nFROM flights.optimized.flights_olap\nWHERE \n  NOT cancelled \n  AND NOT diverted \n  AND depdel15 IS NOT NULL \n  AND arrdel15 IS NOT NULL\nGROUP BY \n  operating_airline, \n  CASE \n    WHEN operated_or_branded_code_share_partners IS NOT NULL \n         AND operated_or_branded_code_share_partners != '' \n         AND operated_or_branded_code_share_partners != 'NA' \n      THEN 'Code-Share Operation' \n    ELSE 'Regular Operation' \n  END\nHAVING COUNT(*) > 100\nORDER BY operating_airline, OperationType;"
    },
    {
      "queryid": "d50a8dfe-6f77-43cc-ad6a-f3e8a18aa1e0",
      "query": "WITH categorized AS (\n  SELECT\n    operating_airline AS Operating_Airline,\n    CASE\n      WHEN regexp_like(tail_number, '^N[0-9][A-Z]{4}$') THEN 'N + 1 digit + 4 letters'\n      WHEN regexp_like(tail_number, '^N[0-9]{2}[A-Z]{3}$') THEN 'N + 2 digits + 3 letters'\n      WHEN regexp_like(tail_number, '^N[0-9][A-Z]{3}$') THEN 'N + 1 digit + 3 letters'\n      WHEN regexp_like(tail_number, '^N[0-9]{3}[A-Z]{2}$') THEN 'N + 3 digits + 2 letters'\n      WHEN regexp_like(tail_number, '^N[0-9]{2}[A-Z]{2}$') THEN 'N + 2 digits + 2 letters'\n      WHEN regexp_like(tail_number, '^N[0-9]{4}[A-Z]$') THEN 'N + 4 digits + 1 letter'\n      WHEN regexp_like(tail_number, '^N[0-9]{3}[A-Z]$') THEN 'N + 3 digits + 1 letter'\n      WHEN regexp_like(tail_number, '^N[0-9]{5}$') THEN 'N + 5 digits'\n      WHEN regexp_like(tail_number, '^N[0-9]{4}$') THEN 'N + 4 digits'\n      WHEN regexp_like(tail_number, '^N[0-9]{3}$') THEN 'N + 3 digits'\n      WHEN regexp_like(tail_number, '^N[0-9]{2}$') THEN 'N + 2 digits'\n      WHEN regexp_like(tail_number, '^N[0-9]$') THEN 'N + 1 digit'\n      ELSE 'Other'\n    END AS AircraftTypeCategory,\n    depdel15,\n    tail_number\n  FROM flights.optimized.flights_olap\n  WHERE tail_number IS NOT NULL\n    AND operating_airline IS NOT NULL\n    AND depdel15 IS NOT NULL\n    AND (cancelled = false OR cancelled IS NULL)\n    AND (diverted = false OR diverted IS NULL)\n)\nSELECT\n  Operating_Airline,\n  AircraftTypeCategory,\n  COUNT(*) AS TotalFlights,\n  SUM(CASE WHEN depdel15 = 1 THEN 1 ELSE 0 END) AS DelayedFlights,\n  ROUND(CAST(SUM(CASE WHEN depdel15 = 1 THEN 1 ELSE 0 END) AS DOUBLE) * 100.0 / COUNT(*), 2) AS DelayPercentage\nFROM categorized\nGROUP BY Operating_Airline, AircraftTypeCategory\nHAVING COUNT(*) > 50\nORDER BY Operating_Airline, DelayPercentage DESC;"
    },
    {
      "queryid": "3e6e6491-e2ec-4741-9007-ba9580615736",
      "query": "SELECT\n  operating_airline AS Operating_Airline,\n  COUNT(*) AS TotalFlights,\n  SUM(CASE WHEN depdel15 = 1 THEN 1 ELSE 0 END) AS TotalDelayedDepartures,\n  SUM(CASE WHEN depdel15 = 1 AND arrdel15 = 0 THEN 1 ELSE 0 END) AS RecoveredFlights,\n  SUM(CASE WHEN depdel15 = 1 AND arrdel15 = 1 THEN 1 ELSE 0 END) AS UnrecoveredFlights,\n  ROUND(\n    SUM(CASE WHEN depdel15 = 1 AND arrdel15 = 0 THEN 1 ELSE 0 END) * 100.0 /\n    NULLIF(SUM(CASE WHEN depdel15 = 1 THEN 1 ELSE 0 END), 0),\n    2\n  ) AS RecoveryRatePercent,\n  ROUND(AVG(CASE WHEN depdel15 = 1 THEN depdelayminutes END), 2) AS AvgDepartureDelayForDelayedFlights,\n  ROUND(AVG(CASE WHEN depdel15 = 1 AND arrdel15 = 0 THEN depdelayminutes END), 2) AS AvgDepartureDelayForRecoveredFlights,\n  ROUND(AVG(CASE WHEN depdel15 = 1 AND arrdel15 = 1 THEN (arrdelayminutes - depdelayminutes) END), 2) AS AvgDelayIncreaseDuringFlight\nFROM flights.optimized.flights_olap\nWHERE\n  cancelled = false\n  AND diverted = false\n  AND depdel15 IS NOT NULL\n  AND arrdel15 IS NOT NULL\nGROUP BY operating_airline\nHAVING SUM(CASE WHEN depdel15 = 1 THEN 1 ELSE 0 END) > 100\nORDER BY RecoveryRatePercent DESC;"
    },
    {
      "queryid": "b5c9bdcd-17ac-44bb-a246-756b9fad907a",
      "query": "SELECT\n  flightdate AS FlightDate,\n  distancegroup AS DistanceGroup,\n  COUNT(*) AS TotalFlights,\n  SUM(CASE WHEN depdel15 = 1 THEN 1 ELSE 0 END) AS DelayedFlights,\n  SUM(CASE WHEN depdel15 = 1 AND distancegroup <= 2 THEN 1 ELSE 0 END) * 120 AS EstimatedPassengersShortHaul,\n  SUM(CASE WHEN depdel15 = 1 AND distancegroup BETWEEN 3 AND 4 THEN 1 ELSE 0 END) * 150 AS EstimatedPassengersMediumHaul,\n  SUM(CASE WHEN depdel15 = 1 AND distancegroup >= 5 THEN 1 ELSE 0 END) * 180 AS EstimatedPassengersLongHaul,\n  (\n    SUM(CASE WHEN depdel15 = 1 AND distancegroup <= 2 THEN 1 ELSE 0 END) * 120\n    + SUM(CASE WHEN depdel15 = 1 AND distancegroup BETWEEN 3 AND 4 THEN 1 ELSE 0 END) * 150\n    + SUM(CASE WHEN depdel15 = 1 AND distancegroup >= 5 THEN 1 ELSE 0 END) * 180\n  ) AS TotalEstimatedAffectedPassengers,\n  ROUND(SUM(CASE WHEN depdel15 = 1 THEN 1 ELSE 0 END) * 100.0 / COUNT(*), 2) AS DelayRatePercentage\nFROM flights.optimized.flights_olap\nWHERE cancelled = false\n  AND diverted = false\nGROUP BY flightdate, distancegroup\nORDER BY flightdate DESC, TotalEstimatedAffectedPassengers DESC;"
    },
    {
      "queryid": "d576f288-9d34-4f78-a185-49501d43e01d",
      "query": "SELECT \n  deptimeblk AS DepartureTimeBlock,\n  COUNT(*) AS TotalFlights,\n  SUM(CASE WHEN depdel15 = 1 THEN 1 ELSE 0 END) AS DelayedDepartures,\n  ROUND(AVG(CASE WHEN depdel15 = 1 THEN depdelay END), 2) AS AvgDepartureDelay,\n  ROUND(AVG(CASE WHEN depdel15 = 1 THEN arrdelay END), 2) AS AvgArrivalDelay,\n  ROUND(AVG(CASE WHEN depdel15 = 1 THEN depdelay - arrdelay END), 2) AS AvgDelayRecoveryMinutes,\n  ROUND(SUM(CASE WHEN depdel15 = 1 AND arrdelay < depdelay THEN 1 ELSE 0 END) * 100.0 /\n        NULLIF(SUM(CASE WHEN depdel15 = 1 THEN 1 ELSE 0 END), 0), 2) AS PercentFlightsRecoveredTime,\n  ROUND(AVG(CASE WHEN depdel15 = 1 AND arrdelay < depdelay THEN depdelay - arrdelay END), 2) AS AvgMinutesRecovered,\n  ROUND(AVG(CASE WHEN depdel15 = 1 AND arrdelay >= depdelay THEN depdelay - arrdelay END), 2) AS AvgDelayGrowth\nFROM flights.optimized.flights_olap\nWHERE \n  NOT cancelled\n  AND NOT diverted\n  AND depdelay IS NOT NULL\n  AND arrdelay IS NOT NULL\n  AND deptimeblk IS NOT NULL\nGROUP BY deptimeblk\nORDER BY SUBSTRING(deptimeblk, 1, 2) ASC;"
    },
    {
      "queryid": "4ab2b57f-2806-4eba-9ded-48630300e5b4",
      "query": "WITH FlightPeriods AS (\n    SELECT \n        operating_airline AS Operating_Airline,\n        month AS Month,\n        dayofmonth AS DayofMonth,\n        cancelled AS Cancelled,\n        CASE \n            WHEN month = 11 AND dayofmonth BETWEEN 20 AND 30 THEN 'Thanksgiving'\n            WHEN (month = 12 AND dayofmonth >= 20) OR (month = 1 AND dayofmonth <= 5) THEN 'Christmas_New_Year'\n            ELSE 'Regular'\n        END AS PeriodType\n    FROM flights.optimized.flights_olap\n),\nCancellationRates AS (\n    SELECT \n        Operating_Airline, \n        PeriodType, \n        COUNT(*) AS TotalFlights,\n        SUM(CASE WHEN Cancelled = true THEN 1 ELSE 0 END) AS CancelledFlights,\n        ROUND(SUM(CASE WHEN Cancelled = true THEN 1 ELSE 0 END) * 100.0 / COUNT(*), 2) AS CancellationRate\n    FROM FlightPeriods\n    GROUP BY Operating_Airline, PeriodType\n    HAVING COUNT(*) > 100\n),\nRegularRates AS (\n    SELECT \n        Operating_Airline, \n        CancellationRate AS RegularCancellationRate\n    FROM CancellationRates\n    WHERE PeriodType = 'Regular'\n)\nSELECT \n    cr.Operating_Airline, \n    cr.PeriodType, \n    cr.CancellationRate AS HolidayCancellationRate, \n    rr.RegularCancellationRate, \n    cr.CancellationRate - rr.RegularCancellationRate AS RateDifference,\n    ROUND((cr.CancellationRate - rr.RegularCancellationRate) * 100.0 / NULLIF(rr.RegularCancellationRate, 0), 2) AS PercentIncrease\nFROM CancellationRates cr\nJOIN RegularRates rr ON cr.Operating_Airline = rr.Operating_Airline\nWHERE cr.PeriodType IN ('Thanksgiving', 'Christmas_New_Year')\nORDER BY cr.PeriodType, RateDifference DESC;"
    },
    {
      "queryid": "e4b0a2ef-1155-46fd-8b66-c364ae03783f",
      "query": "WITH MonthlyData AS (\n    SELECT \n        year AS Year, \n        month AS Month, \n        COUNT(*) AS AirTrafficVolume, \n        AVG(depdelayminutes) AS AvgDepartureDelay\n    FROM flights.optimized.flights_olap\n    WHERE (cancelled IS NULL OR cancelled = false)\n      AND (\n            (year = 2019 AND month <= EXTRACT(MONTH FROM CURRENT_DATE))\n         OR (year = 2018 AND month > EXTRACT(MONTH FROM CURRENT_DATE))\n      )\n    GROUP BY year, month\n),\nCorrelationCalc AS (\n    SELECT \n        CASE \n            WHEN (COUNT(*) * SUM(AirTrafficVolume * AirTrafficVolume) - SUM(AirTrafficVolume) * SUM(AirTrafficVolume)) * (COUNT(*) * SUM(AvgDepartureDelay * AvgDepartureDelay) - SUM(AvgDepartureDelay) * SUM(AvgDepartureDelay)) = 0\n                THEN NULL\n            ELSE (COUNT(*) * SUM(AirTrafficVolume * AvgDepartureDelay) - SUM(AirTrafficVolume) * SUM(AvgDepartureDelay)) /\n                 SQRT((COUNT(*) * SUM(AirTrafficVolume * AirTrafficVolume) - SUM(AirTrafficVolume) * SUM(AirTrafficVolume)) *\n                      (COUNT(*) * SUM(AvgDepartureDelay * AvgDepartureDelay) - SUM(AvgDepartureDelay) * SUM(AvgDepartureDelay)))\n        END AS Correlation\n    FROM MonthlyData\n)\nSELECT \n    md.Year, \n    md.Month, \n    md.AirTrafficVolume, \n    md.AvgDepartureDelay, \n    cc.Correlation AS DelayVolumeCorrelation\nFROM MonthlyData md\nCROSS JOIN CorrelationCalc cc\nORDER BY md.Year, md.Month;"
    },
    {
      "queryid": "19b36ab4-3822-407c-9f98-fcb38bf758ba",
      "query": "WITH RouteClassification AS (\n    SELECT \n        origin, \n        dest, \n        origincityname, \n        destcityname,\n        SUM(CASE WHEN dayofweek BETWEEN 1 AND 5 THEN 1 ELSE 0 END) AS WeekdayFlights,\n        SUM(CASE WHEN dayofweek BETWEEN 6 AND 7 THEN 1 ELSE 0 END) AS WeekendFlights,\n        SUM(CASE WHEN deptimeblk IN ('0500-0559', '0600-0659', '0700-0759', '0800-0859', '0900-0959') THEN 1 ELSE 0 END) AS MorningFlights,\n        SUM(CASE WHEN deptimeblk IN ('1600-1659', '1700-1759', '1800-1859', '1900-1959') THEN 1 ELSE 0 END) AS EveningFlights,\n        SUM(CASE WHEN deptimeblk IN ('1000-1059', '1100-1159', '1200-1259', '1300-1359', '1400-1459', '1500-1559') THEN 1 ELSE 0 END) AS MiddayFlights,\n        SUM(CASE WHEN deptimeblk IN ('2000-2059', '2100-2159', '2200-2259', '2300-2359', '0001-0559','0000-0059', '0100-0159', '0200-0259', '0300-0359', '0400-0459') THEN 1 ELSE 0 END) AS MidnightFlights,\n        SUM(CASE WHEN origin IN ('JFK', 'LAX', 'ORD', 'DFW', 'SFO', 'BOS', 'ATL', 'EWR', 'IAD', 'SEA') AND dest IN ('JFK', 'LAX', 'ORD', 'DFW', 'SFO', 'BOS', 'ATL', 'EWR', 'IAD', 'SEA') THEN 1 ELSE 0 END) AS BusinessHubFlights,\n        SUM(CASE WHEN dest IN ('LAS', 'MCO', 'FLL', 'MIA', 'BWI', 'SAN', 'HNL', 'SLC', 'TPA') THEN 1 ELSE 0 END) AS LeisureDestinationFlights\n    FROM flights.optimized.flights_olap\n    GROUP BY origin, dest, origincityname, destcityname\n    HAVING COUNT(*) > 100\n),\nBusinessLeisureRoutes AS (\n    SELECT \n        origin, \n        dest, \n        origincityname, \n        destcityname,\n        CASE \n            WHEN (WeekdayFlights * 1.0 / NULLIF(WeekendFlights, 0) > 1.5 AND (MorningFlights + EveningFlights) * 1.0 / NULLIF((MorningFlights + EveningFlights + MiddayFlights + MidnightFlights),0) > 0.5 AND BusinessHubFlights > 0) THEN 'Business-Heavy'\n            WHEN (WeekendFlights * 1.0 / NULLIF(WeekdayFlights, 0) > 0.7 AND MiddayFlights * 1.0 / NULLIF((MorningFlights + EveningFlights + MiddayFlights + MidnightFlights),0) > 0.4 AND LeisureDestinationFlights > 0) THEN 'Leisure'\n            ELSE 'Mixed'\n        END AS RouteType\n    FROM RouteClassification\n),\nDelayPatterns AS (\n    SELECT \n        blr.RouteType,\n        CASE WHEN f.dayofweek BETWEEN 1 AND 5 THEN 'Weekday' ELSE 'Weekend' END AS DayType,\n        COUNT(*) AS TotalFlights,\n        SUM(CASE WHEN f.depdel15 = 1 THEN 1 ELSE 0 END) AS DelayedFlights,\n        ROUND(SUM(CASE WHEN f.depdel15 = 1 THEN 1 ELSE 0 END) * 100.0 / COUNT(*), 2) AS DelayRatePercent,\n        ROUND(AVG(f.depdelayminutes), 2) AS AvgDelayMinutes,\n        ROUND(AVG(f.taxiout), 2) AS AvgTaxiOut\n    FROM flights.optimized.flights_olap f\n    JOIN BusinessLeisureRoutes blr ON f.origin = blr.origin AND f.dest = blr.dest\n    WHERE f.cancelled = false AND f.diverted = false\n    GROUP BY blr.RouteType, CASE WHEN f.dayofweek BETWEEN 1 AND 5 THEN 'Weekday' ELSE 'Weekend' END\n)\nSELECT \n    RouteType, \n    DayType, \n    TotalFlights, \n    DelayedFlights, \n    DelayRatePercent, \n    AvgDelayMinutes, \n    AvgTaxiOut,\n    ROUND(DelayRatePercent - (SELECT AVG(DelayRatePercent) FROM DelayPatterns), 2) AS DelayRateVsOverallAvg\nFROM DelayPatterns\nORDER BY RouteType, DayType;"
    }
  ]
}